
if (!String.prototype.trim) {
String.prototype.trim = function () {
return this.replace(/^\s+|\s+$/g, "");
};
}
if (!Array.prototype.indexOf) {
Array.prototype.indexOf = function (searchElement , fromIndex) {
var i,
pivot = (fromIndex) ? fromIndex : 0,
length;
if (!this) {
throw new TypeError();
}
length = this.length;
if (length === 0 || pivot >= length) {
return -1;
}
if (pivot < 0) {
pivot = length - Math.abs(pivot);
}
for (i = pivot; i < length; i++) {
if (this[i] === searchElement) {
return i;
}
}
return -1;
};
}
if (!String.prototype.encodeTags) {
String.prototype.encodeTags = function () {
var str = this;
str = str.replace(/&/g, "&amp;");
str = str.replace(/</g, "&lt;");
str = str.replace(/>/g, "&gt;");
str = str.replace(/"/g, "&quot;");
return str;
}
}
if (!Number.prototype.zeroFill) {
Number.prototype.zeroFill = function (length) {
var zeroes;
if (length)
zeroes = Math.pow(10, length);
else
zeroes = 100;
return (zeroes + this).toString().substr(1);
}
}
/*
elizabot.js v.2.1 - ELIZA JS library (Ewald Berkers 2013)
based on:
elizabot.js v.1.1 - ELIZA JS library (N.Landsteiner 2005)
Eliza is a mock Rogerian psychotherapist.
Original program by Joseph Weizenbaum in MAD-SLIP for "Project MAC" at MIT.
cf: Weizenbaum, Joseph "ELIZA - A Computer Program For the Study of Natural Language
Communication Between Man and Machine"
in: Communications of the ACM; Volume 9 , Issue 1 (January 1966): p 36-45.
JavaScript implementation by Norbert Landsteiner 2005; <http://www.masswerk.at/elizabot/>
Modified and expanded by Ewald Berkers 2013
synopsis:
new ElizaBot()
ElizaBot.prototype.transform( <inputstring> )
ElizaBot.prototype.getResponse("initial")
ElizaBot.prototype.getResponse("final")
ElizaBot.prototype.reset()
usage: var eliza = new ElizaBot();
var initial = eliza.getResponse("initial");
var reply = eliza.transform(inputstring);
if (eliza.quit) {
// last user input was a quit phrase
}
// method `transform()' returns a final phrase in case of a quit phrase
// but you can also get a final phrase with:
var final = eliza.getResponse("final");
// other methods: reset memory and internal state
eliza.reset();
// to set the internal memory size override property `memSize':
eliza.memSize = 100; // (default: 20)
`ElizaBot' is also a general chatbot engine that can be supplied with any rule set.
(for required data structures cf. "elizadata.js" and/or see the documentation.)
data is parsed and transformed for internal use at the creation time of the
first instance of the `ElizaBot' constructor.
*/
ElizaBot.prototype._dataParsed = false;		// has _init function been called once?
// Constructor
function ElizaBot(lang) {
this.version="2.2.11";
var langs=["en","nl","de"];	// Possible languages
if (!lang || !this._inList(langs, lang))
this.lang="en";
else
this.lang=lang.toLowerCase();
// Set debug mode
this.debug=false;						// Display alert box with way the entry is parsed
// Options
this.doCapitalize=true;
this.alwaysCorrect=false;		// Spelling correction always, or when no reply found for part
this.neverCorrect=(this.lang!="en");
this.parseForward=false;		// Whether to go through parts of sentence beginning towards end
this.tooLongChars=120;			// Max. number of characters of sentence part to parse
this.memSize=5;							// Max number of previous replies to be remembered
// Initializing
if (!this._dataParsed)
this._init();
this.reset();
// Initializing variable
this.mentionUnattuned=false;	// Keeping track to mention once the possible lack of attunement
}
// Start new session
ElizaBot.prototype.reset = function() {
// Initializing variables
this.quit=false;							// Quited session
this.restart=false;						// Restarted session
this.repeat='';								// Repeating question
this.sentenceNr=0;						// Number of parsed sentence
this.partNr=0;								// To remember part nr being transformed, for debugging
this.tooLongNr=0;							// To remember number of too long sentence parts
this.mentionTooLong=false;		// Keeping track to mention once too long sentences
this.mem=[];									// Remembered previous replies
// Reset remembered last choice from all pattern rules
this.lastchoice=[];
for (var k=0; k<elizaPatterns.length; k++) {
this.lastchoice[k]=[];
var rules=elizaPatterns[k][2];
for (var i=0; i<rules.length; i++)
this.lastchoice[k][i]=-1;
}
}
// Initialize various lists
ElizaBot.prototype._init = function() {
// install ref to global object
var global=ElizaBot.prototype.global=self;
// parse data and convert it from canonical form to internal use
// produce synonym list
var synPatterns={};
if ((global.elizaSynons) && (typeof elizaSynons == 'object')) {
for (var idword in elizaSynons)
synPatterns[idword]='('+idword+'|'+elizaSynons[idword].join('|')+')';
}
if ((!global.elizaRegex) || (typeof elizaRegex != 'object')) {
elizaRegex={};
}
// check for list of patterns or install empty structure to prevent any errors
if ((!global.elizaPatterns) || (typeof elizaPatterns.length == 'undefined')) {
elizaPatterns=[['###',0,[['###',[]]]]];
}
// convert rules to regexps
// expand synonyms and insert asterisk expressions for backtracking
// Loop through elizaPatterns to convert to regexps
for (var k=0; k<elizaPatterns.length; k++) {
elizaPatterns[k][3]=k; // save original index for sorting
// Expand synonyms into regex patterns
elizaPatterns[k][0]=this._replaceSyns(elizaPatterns[k][0], synPatterns);
// Expand predefined regex patterns
elizaPatterns[k][0]=this._replaceRegex(elizaPatterns[k][0], elizaRegex);
var rules=elizaPatterns[k][2];
for (var i=0; i<rules.length; i++) {
var r=rules[i];
if (!r)
continue;
// Check mem flag "$" and store it as decomp's element 2
r[2]=(r[0].charAt(0)=='$');
if (r[2])
r[0]=r[0].replace(/^\$\s*/, '');	// Remove "$" and spaces following it
// Escape special regex characters
r[0]=escapeRegExp(r[0]);
// Expand synonyms into regex patterns
r[0]=this._replaceSyns(r[0], synPatterns);
// Include predefined regex patterns
r[0]=this._replaceRegex(r[0], elizaRegex);
// Expand wildcard "*" and "+" expressions
r[0]=r[0].replace(/\s*\\\*\s*/g, '(?:\\b(.+)\\b)?');	// "*" is optional
r[0]=r[0].replace(/\s*\\\+\s*/g, '\\b(.+)\\b');				// "+" is mandatory
// Expand white space
r[0]=r[0].replace(/\s+/g, '\\s+');
// Add word boundaries around the whole pattern
r[0]='\\b'+r[0]+'\\b';
// Remove double "\b"
r[0]=r[0].replace(/\\b\\b/g, '\\b');
// Make proper ending after questionmark
r[0]=r[0].replace(/QUESTIONMARK.+$/, 'QUESTIONMARK$');
}
}
// now sort patterns by rank (highest first)
elizaPatterns.sort(this._sortPatterns);
// and compose regexps and refs for pres and posts
ElizaBot.prototype.presEntire={};
ElizaBot.prototype.pres={};
ElizaBot.prototype.posts={};
if ((global.elizaPresEntire) && (elizaPresEntire.length>0)) {
for (var i=0; i<elizaPresEntire.length; i+=2)
ElizaBot.prototype.presEntire[elizaPresEntire[i]]=elizaPresEntire[i+1];
} else {
// default (should not match)
ElizaBot.prototype.presEntire['####']='####';
}
if ((global.elizaPres) && (elizaPres.length>0)) {
var a=new Array();
for (var i=0; i<elizaPres.length; i+=2) {
a.push(elizaPres[i]);
ElizaBot.prototype.pres[elizaPres[i]]=elizaPres[i+1];
}
ElizaBot.prototype.preExp = new RegExp('\\b('+a.join('|')+')\\b', 'i');
} else {
// default (should not match)
ElizaBot.prototype.preExp = /####/;
ElizaBot.prototype.pres['####']='####';
}
if ((global.elizaPosts) && (elizaPosts.length>0)) {
var a=new Array();
for (var i=0; i<elizaPosts.length; i+=2) {
a.push(elizaPosts[i]);
ElizaBot.prototype.posts[elizaPosts[i]]=elizaPosts[i+1];
}
ElizaBot.prototype.postExp = new RegExp('\\b('+a.join('|')+')\\b', 'i');
} else {
// default (should not match)
ElizaBot.prototype.postExp = /####/;
ElizaBot.prototype.posts['####']='####';
}
// check for elizaQuits and install default if missing
if ((!global.elizaQuits) || (typeof elizaQuits != 'object')) {
elizaQuits=["quit", "exit", "bye"];
}
// check for elizaRestarts and install default if missing
if ((!global.elizaRestarts) || (typeof elizaRestarts != 'object')) {
elizaRestarts=["restart"];
}
// check for elizaResponses and install default if missing
if ((!global.elizaResponses) || (typeof elizaResponses != 'object')) {
elizaResponses = {
"initial" : ["What would you like to talk about ?"],
"final" : ["Goodbye."],
"testing" : ["I do not understand."],
"help" : ["Please enter one or more sentences."],
"questionmark" : ["Is there something you don't understand ?"],
"unattuned" : ["Please understand that I can't always give you an attuned response. But, please go on."],
"toolong" : ["I would be better able to understand what you say, when you make shorter sentences, or use more commas. But, please go on."],
"xnone": ["Please go on."],
"noresponse" : ["I do not understand."]
};
}
if (!global.elizaTwoLetterWords || (typeof elizaTwoLetterWords != 'object'))
elizaTwoLetterWords=/^(aa|ab|ad|ae|ag|ah|ai|al|am|an|ar|as|at|aw|ax|ay|ba|be|bf|bi|bo|by|ch|da|de|di|do|ea|ed|ee|ef|eg|eh|el|em|en|er|es|et|ex|fa|fe|fy|gf|gi|go|gu|ha|he|hi|hm|ho|id|ie|if|in|io|is|it|ja|jo|ka|ki|ko|ky|la|li|lo|ma|me|mi|mm|mo|mu|my|na|ne|no|nu|ny|ob|od|oe|of|oh|ok|oi|om|on|oo|op|or|os|ou|ow|ox|oy|pa|pe|pi|po|qi|re|sh|si|so|st|ta|te|ti|to|tx|ty|ug|uh|um|un|up|ur|us|ut|we|wo|xi|xu|ya|ye|yo|yu|za|zo)$/i;
if (!global.elizaIfeel || (typeof elizaIfeel != 'string'))
elizaIfeel='i feel';	// lowercase
if (!global.elizaAnd || (typeof elizaAnd != 'string'))
elizaAnd='and';	// lowercase
if (!global.elizaThanks || (typeof elizaThanks != 'string'))
elizaThanks='Thank you';	// Initial uppercase
if (!global.elizaOkay || (typeof elizaOkay != 'string'))
elizaOkay='Okay';	// Initial uppercase
if (!global.elizaAfterComma || (typeof elizaAfterComma != 'object'))
elizaAfterComma = ["but","and","however","btw","by the way","so","is that","although","even though"];
ElizaBot.prototype._reAfterComma=new RegExp('\\.('+elizaAfterComma.join('|')+')\\b\\s*', 'gi');
// done initializing
ElizaBot.prototype._dataParsed=true;
}
// Replace synonyms in pattern string
ElizaBot.prototype._replaceSyns = function(s, synPatterns) {
var reSyn=/@(\=?)(\S+)/;		// synonym is preceded by "@", and consists of non-space characters
var m, sp;
while (m=reSyn.exec(s)) {
sp=(synPatterns[m[2]])? synPatterns[m[2]] : m[2];
if (m[1])
sp='^'+sp+'$';		// if "=" after the "@", synonym must be the whole sentence
else
sp='\\b'+sp+'\\b';
s=s.replace('@'+m[1]+m[2], sp);
}
return s;
}
// Replace regular expressions in pattern string
ElizaBot.prototype._replaceRegex = function(s, listRegex) {
var reRegex=/%(\=?)(\S+)/;		// regex name is preceded by "%", and consists of non-space characters
var m, sp;
while (m=reRegex.exec(s)) {
if (m[1])
sp='^'+listRegex[m[2]]+'$';		// if "=" after the "%", regex must be the whole sentence
else
sp='\\s*\\b'+listRegex[m[2]]+'\\b\\s*';
s=s.replace(new RegExp('\\s*%'+m[1]+m[2]+'\\s*', 'i'), sp);
}
return s;
}
// Sorting function for elizaPatterns
ElizaBot.prototype._sortPatterns = function(a,b) {
// sort by rank
if (a[1]>b[1]) return -1
else if (a[1]<b[1]) return 1
// or original index
else if (a[3]>b[3]) return 1
else if (a[3]<b[3]) return -1
else return 0;
}
// Make reply from input text
ElizaBot.prototype.transform = function(text) {
var reply='';		// Prepare fresh reply
this.quit=false;
this.restart=false;
//this.sentenceNr++;		// Keep track of how many sentences have been done
if (++this.sentenceNr==7)
this.mentionUnattuned=true;	// Don't do the "unattuned" response when things go well for some time
// Check for entering repeating question
var reRepeat=/^repeat\s*[\:\s]\s*/i;
if (reRepeat.test(text)) {
// Remove "Repeat: " at the beginning
this.repeat=text.replace(reRepeat,'');
// Clean up
this.repeat=this.removeSpaces(this.repeat);
this.repeat=this.repeat.encodeTags();
this.repeat=this.capitalizeText(this.repeat);
return elizaOkay+'. '+this.repeat;
}
// Check whether initial sentence is entered, respond with another initial
// (this may happen when people try to let 2 Elizabots talk to each other, which makes little sense.)
if (this._inList(elizaResponses["initial"], text))
return this.getResponse("initial");
// Question mark entered
if (text=='?')
if (this.sentenceNr==1)
return this.getResponse("help");	// as first thing, take it to mean a request for help (software help, that is)
else
return this.getResponse("questionmark");	// specific response to question mark
// Clean up
text=this._preTransform(text);
// Check for entire sentence to be gibberish, user wants to test Eliza
// Single letters (except "F" which can be short for "Fuck you"), words like "test", "blah"
// 2 letters, when they're not a word, or repeated letters or numbers
var reTesttxt=/^([^f]|\d+|test(ing)?|(blah?[\s,]*)+\.?)$/i;
var reRepeated=/^([^fmoxz])\1{2,}$/i;
if (this._invalidTwoLetterWord(text) || reTesttxt.test(text) || reRepeated.test(text))
return this.getResponse("testing");
// Return version number
if (text=="version")
return this.version;
// split sentence in parts, and loop through them
var parts=text.split('.');
var part;
for (var i=0; i<parts.length; i++) {
if (this.parseForward)
this.partNr=i;
else
this.partNr=parts.length -1 -i;
part=parts[this.partNr];
// Don't do empty sentences, or long ones, as the latter are error prone
if (!part)
continue;
if (part.length>=this.tooLongChars && !this.repeat) {
this.tooLongNr++;
continue;
}
// Replacements of entire sentence part
if (this.presEntire[part.toLowerCase()])
part=this.presEntire[part.toLowerCase()];
var doCorrect=this.alwaysCorrect;
do {
if (this.alwaysCorrect && !this.neverCorrect)
part=correctSentence(part);
// check for quit expression
if (this._inList(elizaQuits, part)) {
this.quit=true;
return this.getResponse("final");
}
// check for restart expression
if (this._inList(elizaRestarts, part)) {
this.restart=true;
return '';
}
// If there is a repeating question active, return it
if (this.repeat)
return elizaThanks+" - "+this.repeat;
// preprocess
part=this._replacePhrases(part, this.preExp, this.pres);
// try get reply from rules
if (reply=this._replyFromRules(part))
return reply;
// Decide whether to do spelling correction
doCorrect=!doCorrect && !this.neverCorrect;
if (doCorrect) {
var partCorrected=correctSentence(part);
// Check if spelling corrected sentence would make any difference
if (partCorrected==part)
doCorrect=false;
else
part=partCorrected;
}
} while (doCorrect);
}
// No pattern matched, try get reply from mem
if (reply=this._memGet())
return reply;
// Nothing in mem, so get one of the default replies
// Check need for message that Eliza is not always attuned well
if (!this.mentionUnattuned) {
this.mentionUnattuned=true;		// Only first time do "unattuned" instead of "xnone"
return this.getResponse('unattuned');
}
// Check need for message that Eliza finds sentences too long
if (!this.mentionTooLong && (this.tooLongNr >=4) && (this.sentenceNr/this.tooLongNr <2.0)) {
this.mentionTooLong=true;
return this.getResponse('toolong');
}
// Return default response
return this.getResponse('xnone');
// No reply found, return 'noresponse' string (should never be executed)
return this.getResponse('noresponse');
}
// Select a reply from the rules, if possible
ElizaBot.prototype._replyFromRules = function(text) {
var reply, reRule;
for (var k=0; k<elizaPatterns.length; k++) {
reRule=new RegExp('\\b'+elizaPatterns[k][0]+'\\b', 'i');
if (reRule.test(text))
if (reply=this._execRule(k, text))
return reply;
}
return '';
}
// Check sub-rules
ElizaBot.prototype._execRule = function(k, sentence) {
var decomps=elizaPatterns[k][2];		// rules
for (var i=0; i<decomps.length; i++) {
if (!decomps[i] || !decomps[i][0])
continue;
var reRule=new RegExp(decomps[i][0], 'i');
var matchedRule=sentence.match(reRule);
if (matchedRule) {
var reasmbs=decomps[i][1];
var memflag=decomps[i][2];
// Random entry, make sure is different from previous time
var ri= this._randomIndex(reasmbs);
if (this.lastchoice[k][i]==ri) {
ri= ++this.lastchoice[k][i];	// choose next if current choice is same as previous time
if (ri>=reasmbs.length) {
ri=0;
this.lastchoice[k][i]=-1;	// make remembered index empty
}
} else
this.lastchoice[k][i]=ri;		// remember current selection
// Reply is selected one
var reply=reasmbs[ri];
// Display data of this reply selection
if (this.debug)
alert('Sentence '+this.sentenceNr+'.'+this.partNr+': "' +sentence +'"\n'+
'\nMatch is:'+
'\n- key: '+elizaPatterns[k][0]+
'\n- rank: '+elizaPatterns[k][1]+
'\n- decomp: '+decomps[i][0]+
'\n- reasmb: '+reply+
'\n- memflag: '+memflag);
// Check for goto statement
var reGoto=/^goto /i;
if (reGoto.test(reply))
return this._replyFromRules(reply.substring(5));
// substitute positional params
var reParam=/\(([0-9]+)\)/;			// like "(3)", number (wildcard) in reply
var matched;
while (matched=reParam.exec(reply)) {			// select numbered wildcards in reply
var param = matchedRule[ parseInt(matched[1]) ];		// content to be substituted at wildcard position
if (typeof param=='undefined')
param='';			// optional wildcard not there
else
param=this._replacePhrases(param, this.postExp, this.posts);
// replace wildcard with param
reply=reply.replace(matched[0], param);
}
// Final cleanings
reply=this._postTransform(reply);
if (memflag)
this._memSave(reply);		// Remember reply for use later
else
return reply;						// Use reply now
}
}
// No reply selected
return '';
}
// Preliminary cleanings
ElizaBot.prototype._preTransform = function(s) {
var matched;
// Unify text string for parsing
s=this.removeSpaces(s);
// In German, convert umlaut characters
if (this.lang=="de")
s=this._replaceUmlauts(s);
// If only capitals, make lowercase
if (/^[A-ZÄËÏÖÜ\s,.!?:;-]+$/.test(s))
s=s.toLowerCase();
// Make first letter of each sentence lowercase (BUT what for German?)
if (this.lang!="de") {
s=s.substr(0, 1).toLowerCase() + s.substr(1);
var reNewSentence=/\.\s*[A-ZÄËÏÖÜ]/;
while (matched=reNewSentence.exec(s)) {
s=s.replace(matched[0], matched[0].toLowerCase());
}
}
// Perhaps make names capitalized?
// Perhaps collect all words (non-first in sentence) that are capitalized, and make them
// always capitalized?
// This may go wrong when a capitalized word can also appear as non-capitalized.
//
// Check for single word entry (no spaces), make sentence when it's a feeling-word
if (/^\w{3,}$/.test(s))
if (this._inList(elizaFeelings, s))
s=elizaIfeel+' '+s.toLowerCase();
// Remove '...' in sentences
s=s.replace(/\s*\.{3,}\s*([a-z])/, ' $1');
// Remove inconvenient characters
s=s.replace(/[@#\$%\^&\*\(\)_\+=~`\{\[\}\]\|<>\/\\]+/gi, ' ');	// replace non-s with spaces
s=s.replace(/\s+-+\s+/g, '.');						// replace hyphens between spaces with a dot
// Replace enumeration commas with "and", so that these don't delimit sentence parts
// "one, two and three" -> "one and two and three"
var reEnum=new RegExp('\\b(?:[\\w-]+\\s*,+\\s*)+[\\w-]+[,\\s]+'+elizaAnd+'\\s+[\\w-]+\\b', 'i');
var reSomeAnds=new RegExp('(\\s+'+elizaAnd+'){2,}\\b', 'gi');
var ands;
while (matched=reEnum.exec(s)) {
ands=matched[0].replace(/[,\s]+/g, ' '+elizaAnd+' ');
//ands=ands.replace(/(\s+and){2,}\b/gi, ' '+elizaAnd);
ands=ands.replace(reSomeAnds, ' '+elizaAnd);
s=s.replace(matched[0], ands);
}
if (this.lang=="de") {
// In German, remove commas after short sentence parts
s=s.replace(/(^|[,.!?:;])(\S+(:?\s+\S+){1,2})\s*,/gi, '$1$2');
// Remove commas before "dass"
s=s.replace(/,+\s*(dass\s)/, ' $1');
//alert(s);
}
s=s.replace(/\s*[,.!:;]+\s*/g, '.');			// replace punctuation with a single dot (not questionmark)
s=s.replace(/\s*\?+\s*/g, ' QUESTIONMARK.');	// replace questionmark with word for it, and single dot
s=s.replace(this._reAfterComma, '.');		// remove 'but', 'and', etc. at beginning of sentence part
s=this.removeSpaces(s);		// remove extra spaces that may have been introduced in the process
return s;
}
// Final cleanings
ElizaBot.prototype._postTransform = function(s) {
s=this.removeSpaces(s);
if (this.doCapitalize)
s=this.capitalizeText(s);
// Change enumerations with various "and" back to comma form
// "one and two and three" -> "one, two and three"
//var reAnds=/(?:[\w-]+ and )+[\w-]+ and [\w-]+/;
var reAnds=new RegExp('(?:[\\w-]+ '+elizaAnd+' )+[\\w-]+ '+elizaAnd+' [\\w-]+', 'i');
var reAllAnds=new RegExp(' '+elizaAnd+' ', 'gi');
var matched, commas;
while (matched=reAnds.exec(s)) {
//commas=matched[0].replace(/ and /gi, ', ');
commas=matched[0].replace(reAllAnds, ', ');
commas=commas.replace(/, ([\w-]+)$/i, ' '+elizaAnd+' $1');
s=s.replace(matched[0], commas);
}
if (this.lang=="en") {
// If necessary, turn verb forms to gerund ("to do" -> "doing"),
// where the verb form is preceded by capitals "GERUND"
var reToVerb=/(?:GERUND )(to (\S+))\b/;
var matched, verb;
while (matched=reToVerb.exec(s)) {
verb=matched[2].replace(/([^aeiou])([aeiou])([bdfgklmnprstz])$/, '$1$2$3$3');		// double consonant at the end
verb=verb.replace(/(\w[^aeiou])e$/, '$1');	// remove 'e' at the end
s=s.replace(matched[0], verb+'ing');
}
// Remove helper words like GERUND, if they failed to be removed when they should
s=s.replace(/GERUND ?/g, '');
// "not not", "not absolutely not"
var reNotNot=/\bnot(\s+\S+)?\s+not\b/;
while (matched=reNotNot.exec(s)) {
if (matched[1])
word=matched[1];
else
word='';
s=s.replace(matched[0], word);
}
}
if (this.lang=="nl") {
// Werkwoord in ik-vorm zetten - "t" weglaten aan het eind
var reToIkVorm=/(?:IKVORM )(\S+t)\b/;
var matched, verb;
while (matched=reToIkVorm.exec(s)) {
verb=matched[1].replace(/([^aeou])t$/, '$1');		// remove 't' at the end
s=s.replace(matched[0], verb);
}
// Remove helper words like IKVORM, if they failed to be removed when they should
s=s.replace(/IKVORM ?/g, '');
// "niet niet", "niet toch niet"
var reNotNot=/\bniet(\s+\S+)?\s+niet\b/;
var word;
while (matched=reNotNot.exec(s)) {
if (matched[1])
word=matched[1];
else
word='wel';
s=s.replace(matched[0], word);
}
}
if (this.lang=="de") {
// Werkwoord in ik-vorm zetten - "t" weglaten aan het eind
var matched, verb;
var reToIkVorm=/(?:ICHFORM )(\S+st)\b/;
while (matched=reToIkVorm.exec(s)) {
verb=matched[1].replace(/([^aeiou])st$/, '$1e');		// replace 'st' at the end with 'e'
s=s.replace(matched[0], verb);
}
var reToJijVorm=/(?:DUFORM )(\S+e?)\b/;
while (matched=reToJijVorm.exec(s)) {
verb=matched[1].replace(/([^aeiou])e?$/, '$1st');		// replace 'e' at the end with 'st'
s=s.replace(matched[0], verb);
}
// Remove helper words like IKVORM, if they failed to be removed when they should
s=s.replace(/(:?ICHFORM|DUFORM) ?/g, '');
// Put back umlauts
s=this._returnUmlauts(s);
// "nicht nicht", "nicht aber nicht"
var reNotNot=/\bnicht(\s+\S+)?\s+nicht\b/;
while (matched=reNotNot.exec(s)) {
if (matched[1])
word=matched[1];
else
word='wohl';
s=s.replace(matched[0], word);
}
// Comma before "dass" (what if more than one ?!)
s=s.replace(/([^,])( ohne)? dass /, '$1, dass ');
}
s=s.replace(/\s*QUESTIONMARK\s*/g, '');
return s;
}
// Remove unnecessary or in-the-way spaces
ElizaBot.prototype.removeSpaces = function(s) {
s=s.trim();
s=s.replace(/\s{2,}/g, ' ');
s=s.replace(/\s+\./g, '.');
return s;
}
// Start sentence with capital letter, "I" capital letter, full stop at the end
ElizaBot.prototype.capitalizeText = function(s) {
if (this.lang=="en")
s=s.replace(/\si\s/g, ' I ');
var re=/^([a-z])/;
var m=re.exec(s);
if (m)
s=m[0].toUpperCase()+s.substring(1);
// Also add a full stop at the end of the sentence, if it isn't there, and there is more than one word
if (/\s/.test(s) && /[^.,;:-?!]$/.test(s))
s+='.';
return s;
}
// Test whether string is a 2-letter word that doesn't exist
ElizaBot.prototype._invalidTwoLetterWord = function(str) {
if (str.length!=2)
return false;
return !elizaTwoLetterWords.test(str);
}
// Remember reply
ElizaBot.prototype._memSave = function(t) {
this.mem.push(t);
if (this.mem.length>this.memSize)
this.mem.shift();
}
// Get saved reply
ElizaBot.prototype._memGet = function() {
if (this.mem.length>0) {
// Select reply
var n=this._randomIndex(this.mem);
var reply=this.mem[n];
// Remove selected entry from list
for (var i=n+1; i<this.mem.length; i++)
this.mem[i-1]=this.mem[i];
this.mem.length--;
return reply;
} else
return '';
}
// Get random response from category in array elizaResponse (intial/final/testing/noresponse)
ElizaBot.prototype.getResponse = function(category) {
var str, elizaResponse = elizaResponses[category];
str=this._randomEntry(elizaResponse);
if (this.lang=="de")
str=this._returnUmlauts(str);
return str;
}
// Get random index for entry in list
ElizaBot.prototype._randomIndex = function(list) {
return Math.floor(Math.random()*list.length);
}
// Get random entry from list
ElizaBot.prototype._randomEntry = function(list) {
return list[this._randomIndex(list)];
}
// Check whether entry is in list
ElizaBot.prototype._inList = function(list, entry) {
for (var q=0; q<list.length; q++)
if (list[q]==entry.toLowerCase())
return true;
return false;
}
// replace phrases for preprocessing and postprocessing
ElizaBot.prototype._replacePhrases = function(str, regexList, replaceList) {
var matched;
var leftPart='';
while (matched=regexList.exec(str)) {
leftPart += str.substring(0, matched.index) + replaceList[matched[0].toLowerCase()];
str = str.substring(matched.index + matched[0].length);
}
return (leftPart + str);
}
// Replace German umlauts with ae/oe/ue, and escape ß
ElizaBot.prototype._replaceUmlauts = function(s) {
var translate = {
"ä": "ae", "ö": "oe", "ü": "ue",
"Ä": "Ae", "Ö": "Oe", "Ü": "Ue",
"ß": "\ß"
};
var reTranslate = /[öäüÖÄÜß]/g;
return ( s.replace(reTranslate, function(match) {
return translate[match];
}) );
}
// Replace German umlauts with ae/oe/ue
ElizaBot.prototype._returnUmlauts = function(s) {
var translate = {
"ae":"ä", "oe":"ö", "ue":"ü",
"Ae":"Ä", "Oe":"Ö", "Ue":"Ü"
};
var reTranslate = /[^ae][oauOAU]e/g;		// Exception: "freue" (should not become "freü"), "misstrauen"
return ( s.replace(reTranslate, function(match) {
return match.substr(0, 1) + translate[match.substr(1,2)];
}) );
}
// Escape string to be treated as regular expression (source: Mozilla javascript docs)
function escapeRegExp(string){
return string.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
}
// fix array.prototype methods (push, shift) if not implemented (MSIE fix)
if (typeof Array.prototype.push == 'undefined') {
Array.prototype.push=function(v) {
return this[this.length]=v;
};
}
if (typeof Array.prototype.shift == 'undefined') {
Array.prototype.shift=function() {
if (this.length==0)
return null;
var e0=this[0];
for (var i=1; i<this.length; i++)
this[i-1]=this[i];
this.length--;
return e0;
};
}
﻿// Data for elizabot.js
// entries prestructured as layed out in Weizenbaum's description
// [cf: Communications of the ACM, Vol. 9, #1 (January 1966): p 36-45.]
// Modified by Ewald Berkers
// Responses to be given from the system, rather than the pattern parser
var elizaResponses = {
// Starting the session with an invitation to talk
"initial" : [
"Sage mir, was du jetzt fühlst.",
"Könntest du mir sagen, was gerade los ist in dir ?",
"Was geht jetzt in deinem Kopf vor ?",
"Gibt es etwas das dich beunruhigt, worüber du sprechen möchtest ?",
"Worüber würdest du gerne  sprechen?"
],
// Closing the session
"final" : [
"Auf Wiedersehen.  Es war schön, mit dir zu sprechen.",
"Auf Wiedersehen.  Ich freue mich auf unsere nächste Sitzung.",
"Auf Wiedersehen.  Bleibe dich von dich selbst bewusst.",
"Auf Wiedersehen.  Bleibe deine Gefühle aufmerken."
],
// Default response, for when no response can be found from the patterns
"xnone": [
"Mach weiter.",
"Wie ist das für dich ?",
"Wie fühlt sich das für dich an ?",
"Das ist interessant.  Mach weiter.",
"Bleibe bei deinen Empfindungen.  Mach weiter.",
"Erzähle mir mehr darüber.",
"Erzähle mir mehr über deine Gefühle darüber."
],
// When someone is entering gibberish, inviting the person to start communicating
"testing" : [
"Was willst du machen ?",
"Willst du mich testen ?",
"Gibt es eine Katze auf deiner Tastatur ?"
],
// Help text
"help" : [
"Gebe einen oder mehrere Sätze ein."
],
// Response to question mark
"questionmark" : [
"Gibt es vielleicht etwas was du nicht begreifst ?",
"Ist vielleicht etwas nicht klar ?"
],
// Mention that Eliza isn't perfect
"unattuned" : [
"Nebenbei, bedenke, dass ich nicht immer eine fein abgestimmte Reaktion geben kann.<br>-- Aber, mach weiter."
],
// Mention when many sentences are too long to process
"toolong" : [
"Nebenbei, ich könnte besser verstehen was du sagst, wenn du kürzere Sätze bilden würdest, oder mehrere Kommas verwenden würdest.<br>-- Aber, mach weiter."
],
// When the system fails to properly parse the input
"noresponse" : [
"Ich verstehe nicht ganz was du gerade gesagt hast. Könntest du es in anderen Worten sagen ?"
]
};
// Phrases that make Eliza end the session
var elizaQuits = [
// English, just to be sure
"bye",
"bye now",
"bye bye",
"bye-bye",
"bye, bye",
"goodbye",
"good-bye",
"good bye",
"bey",
"goodbey",
"good bey",
"exit",
"quit",
"end",
"terminate",
// German
"tschues",
"tschuess",
"wiedersehen",
"auf wiedersehen",
"adieu",
"tschau",
"tschoe",
"ciao",
"ende",
"beenden",
"halt",
"stop",
"stopp",
// SMS abbreviations
"cwyl",
"sfh",
"tafn",
"bb",
"c u"
];
// Phrases that make Eliza start a new session
var elizaRestarts = [
"restart",
"renew"
];
// Replacements for entire sentence parts (done before further processing)
var elizaPresEntire = [
"wie geht es dich", "hallo",
"wie geht es dir", "hallo",
"wie geht es ihnen", "hallo",
"wie geht es", "hallo",
"wie geht's", "hallo",
"wie gehts", "hallo"
];
// Replacements of parts of sentences (done before further processing)
var elizaPres = [
"fuehl' ", "fuehle ",
"fuehl", "fuehle",
"hab'", "habe",
"hab", "habe",
"yeah", "ja",
"yep", "ja",
"noe", "nein",
"ok", "okay",
"nichts als", "nur",
"nichts außer", "nur",
"nichts wie", "nur",
"alles andere als", "nicht",
"dunno", "ich weiß nicht",
"f", "fuck you",
"f y", "fuck you",
"fu", "fuck you",
"luv", "liebe",
"sry", "sorry",
"thx", "Danke",
"thks", "Danke",
"thnq", "Danke",
"tnx", "Danke",
"thnx", "Danke",
"tx", "Danke",
"txs", "Danke",
"t y", "Danke",
"ty", "Danke",
"bzw.", "beziehungsweise"
];
// Replacements for parts to be substituted after a rule has been selected from keywords (needs lowercase)
// Order is important: the first that fits gets preference, so combinations of words need to be tried first
var elizaPosts = [
"kan ich", "Könntest du",
"ich bin", "du bist",
"du bist", "ich bin",
"bist du", "bin ich",
"bin ich", "bist du",
"ich war", "du warst",
"du warst", "ich war",
"warst du", "war ich",
"war ich", "warst du",
"ich habe", "du hast",
"ich selbst", "dich selbst",
"dich selbst", "ich selbst",
"dir selbst", "ich selbst",
"bin", "bist",
"war", "warst",
"bist", "bin",
"warst", "war",
"dich", "mich",
"dein", "mein",
"deine", "meine",
"deinen", "meinen",
"deinem", "meinem",
"deiner", "meiner",
"ich", "du",
"du", "ich",
"mein", "dein",
"meine", "deine",
"meiner", "deiner",
"meinen", "deinen",
"meinem", "deinem",
"uns", "euer",
"unse", "euere",
"unser", "euerer",
"unsere", "euere",
"unseren", "eueren",
"unserem", "euerem",
"unserer", "euerer",
"mich", "dich",
"dich", "mich",
"mir", "dir",
"dir", "mir"
];
// Synonyms to be used in elizaPatterns (both main and sub patterns)
var elizaSynons = {
// Various
"bin": ["bist", "ist", "sein", "war", "warst", "waren"],
"ichdu": ["ich", "du"],
"binhabe": ["bin", "war", "habe", "hatte"],
"mein": ["meiner", "meines", "meine"],
"hihallo": ["hi", "hallo", "hey", "namaste", "guten tag", "guten morgen", "guten abend", "guten mittag", "servus", "grueezi", "moin", "allegra", "gude", "gruß dich", "halloechen", "tagchen", "salue"],
"entschuldigung": ["entschuldigung bitte", "entschuldige", "entschuldige bitte", "tschuldigung", "verzeihung", "tut mir leit", "pardon", "sorry"],
"danke": ["vielen dank", "tausend dank", "schoenen dank", "danke schoen", "herzlichen dank", "verbintlichsten dank", "aufrichtiger dank"],
"fickdich": ["fick dich", "Fick dich ins Knie", "go to hell", "drop dead", "fuck you", "go fuck yourself"],
"shutup": ["shut up", "halt die schnauze", "halt doch die schnauze", "halt verdammt noch mal die schnauze", "fuck off"],
"jeder": ["jedermann"],
"einefrage": ["was ist", "was sein", "was sind", "wie macht", "wie machst", "wo ist", "wo sind", "wer ist", "wer sind", "warum ist", "warum sein", "warum sind", "wist du", "wissen sie"],
"glaube": ["denke", "vermute"],
"kindlich": ["wie ein kind", "kindisch"],
"musszugeben": ["ich muss zugeben", "ich muss allerdings zugeben", "ich muss gestehen", "dass muss ich zugeben", "ich gebe zu", "ich habe zugeben müssen"],
"niemand": ["keiner"],
"vielleicht": ["moeglich", "moeglicherweise"],
"gleiche": ["der selbe", "die selbe", "derselbe", "dieselbe", "aequivalent", "identisch", "aenlich wie", "gleich wie", "genau wie"],
"ungleich": ["anders", "andre", "verschieden", "abweichend", "unaehnlich"],
"traeumte": ["hab getraeumt", "habe getraeumt", "hatte einen traum", "hab traumen", "habe traumen"],
"erinnere": ["erinnerst du dich", "weißt du noch", "weisst du noch"],
"vergesse": ["vergessen", "erinnere mich nicht", "erinnerte mich nicht", "kann mich nicht erinneren", " könnte mich nicht erinneren", "bin vergessen", "war vergessen"],
"uebel": ["kotzuebel", "speiuebel"],
"diesdas": ["es", "das", "dies", "diese", "diesen", "diesem"],
"wolle": ["wuenche", "begehre", "ersehne", "verlange", "brauche", "benoetige"],
// Feeling
"ichfuehle": ["ich fuehlte mich", "ich fuehle mich"],
// es fuehlt sich (ganz) an  wie // als ob/als wenn/wie wenn/als würde/als wie wenn
"alsob": ["als ob", "als wenn", "wie wenn", "als würde", "als wie wenn"],
// es fuehlt sich ... an
"makefeel": ["makes me feel", "made me feel"],
"machtmich": ["macht mich", "machte mich", "hat mich"],
"ausgezeichnet": ["gut", "prima", "fantastisch", "super"],
"schrecklich": ["scheiße", "grausam", "schlecht", "furchtbar"],
"nichtfuehlen": ["fuehle nichts", "fuehle gar nichts", "bin gefuehllos", "habe keine gefuehle", "hab keine gefuehle", "betaeubt"],
"fuehleangespannt": ["ich fuehle mich angespannt", "ich fuehle anspannung", "ich fuehle eine anspannung", "es gibt anspannung", "es gibt eine anspannung", "ist verspannt"],
// "Mir wird das alles zu viel"
// Deficiencies
"kannnicht": ["kann nicht", "bin nicht imstande", "bin unfaehich", "fuehle mich unfaehich", "habe nicht die faehigkeit"],
"luktniet": ["lukt het niet", "lukt het me niet", "ben ik niet in staat", "heb ik niet het vermogen om", "krijg ik het niet voor elkaar"],
"machtlos": ["kan nichts tun", "keinerlei Einfluss", "keinen Einfluss"],
"ueberfordert": ["ueberwaeltigt", "ueberschuettet", "nicht genug zeit", "lange liste", "ueberlastet", "allzuviel", "allzu viel", "viel zu viel", "viel zuviel", "einfach zu viel", "einfach zuviel", "unbeherschbar", "unvorhersehbar", "unvoraussehbar", "unvoraussagbar", "ist zu zwierig", "ueberschulde", "viel zu tun"],
"verlange": ["wuensche", "begehre", "will", "brauche", "schmachte", "lechze", "ersehne", "sehne", "bedarfe", "benoetige"],
"verwirrt": ["wirr", "durcheinander", "verworren", "konfus", "bregenklöterig", "vernebelt"],
"ungewuerdigt": ["wertlos", "nicht wuerdig", "unwuerdig", "erniedrigt", "nicht geschaetzt"],
// Emotions
"boese": ["wuetend", "zornig", "erbost", "ergrimmt", "sauer"],
"angst": ["aengstlich", "angstvol", "bang", "bange", "nervoes", "panisch"],
"froh": ["gluecklich", "glueckselig", "froehlich"],
"traurig": ["betruebt", "schwermutig", "betrueblich", "todtraurig", "melancholisch", "trueb", "truebsinnig", "trist", "duester"],
"hass": ["hasse", "bin siedend", "koche vor wut", "gehaessigkeit"],
"ueberrascht": ["erstaunt", "erwundert", "nicht erwartet", "entgeistert", "verbluefft", "total von den socken"],
"emofrustration": ["unfair", "unehrlich", "ich bin frustriert", "platzt mir der kragen", "reicht es mir aber", "reichts aber", "reißt mir aber der Geduldsfaden"],
// Enneagram
"verkehrt": ["falsch", "unkorrekt", "nicht korrekt", "fehlgeleitet", "irregefuehrt", "irregeleitet", "irrig", "nicht richtig", "unangebracht", "toericht", "unsinnig"],
"gesperrt": ["blockiert", "aufgehaltet", "mich gestoppt", "kastriert"],
"etwastun": ["daran tun", "erledige"],
"getrennt": ["verlassen", "nicht verbunden", "entfremdet", "kein kontakt", "wir reden nicht", "allein", "einsam", "abgeschnitten", "abgeschieden"],
"isoliert": ["isoliere mich", "abgeschieden", "alleinstehend", "abgehoben", "zurueckgezogen", "zurueckhaltend", "halte mich zurueck", "einsiedlerisch", "einsiedler", "einzelgaengerisch", "einzelgaenger", "abgesondert", "sondere mich ab"],
//"misstrauen": ["misstrauisch"],
"fuehleverloren": ["weiß nicht was zu tun", "fühle mich verloren", "weiß nicht was zu sagen", "weiß es nicht mehr", "weiß nicht wie weiter zu gehen"],
"beschuldigt": ["vorgeworfen", "schuldig"],
"nichtgeliebt": ["nicht geliebt", "minderwertig", "minderwaardigheidscomplex", "minderwertigkeitsgefühl", "minderwertigkeitskomplex", "mittelmäßig", "bedeutungslos", "unwichtig", "unbedeutend", "nicht akzeptiert", "nicht gut genug"],
// Superego
"selbstbestrafung": ["geißele mich", "bestrafe mich"],
"unterordnend": ["als", "damit", "je", "sodass", "während", "als dass", "dass", "nachdem", "sofern", "weil", "als ob", "ehe", "ob", "solange", "wenn", "als wenn", "falls", "obgleich", "sooft", "wenn auch", "anstatt", "geschweige", "obschon", "soviel", "wenngleich", "anstatt dass", "gleichwie", "obwohl", "soweit", "wie", "außer dass", "indem", "obzwar", "sowenig", "wie wenn", "außer wenn", "indes", "ohne dass", "sowie", "wiewohl", "bevor", "indessen", "seit", "statt", "wo", "bis", "insofern", "seitdem", "statt dass", "wohingegen", "da", "insoweit", "sobald", "trotzdem", "zumal"],
// Du gehst weg. 		     Ich bleibe hier.
// Du gehst weg, während ich hier bleibe.
// Ich muss mich beeilen.      Ich bin spät dran.
// Ich muss mich beeilen, weil ich spät dran bin.
// Languages
"nederlands": ["ik", "ben", "voel", "denk", "kwaad", "verdrietig"],
"english": ["are", "feel", "i", "your", "its"],
"francais": ["aime", "avez", "bien", "bonjour", "comme", "etre", "mais", "moi", "que", "savoir", "suis", "toujours", "un", "une", "vous"]
};
// Regular expressions (needs () around total)
var elizaRegex = {
"max1word": ["(\\w+)?"],
"max2words": ["((?:\\w+\\s+)?\\w+)?"],
"max3words": ["((?:\\w+\\s+){0,2}\\w+)?"],
"questionmark": [" QUESTIONMARK"],
"bijwoord": ["(\\w+lich)"],
"um": ["(?:um)?"],
"it-emotes-me": ["(es ((\\w+[t])) mich)"]
}
// Keywords and responses
var elizaPatterns = [
/*
Array of
["<key>", <rank>, [
["<decomp>", [
"<reasmb>",
"<reasmb>",
"<reasmb>"
]],
["<decomp>", [
"<reasmb>",
"<reasmb>",
"<reasmb>"
]]
]]
*/
["@hihallo", 0, [
["+ @hihallo", [
"Was bedeutet das für dich ?",
"Wie fühlt sich das für dich an ?"
]],
["@hihallo +", [
"(1).  Sage mir, was du jetzt fühlst.",
"(1).  Könntest du mir sagen, was gerade los ist in dir ?",
"(1).  Wie fühlst du dich jetzt?",
"(1).  Worüber würdest du gerne sprechen?",
"(1).  Gibt es etwas das dich beunruhigt, worüber du sprechen möchtest ?"
]],
["+", [
"(1).  Sage mir, was du jetzt fühlst.",
"(1).  Könntest du mir sagen, was gerade los ist in dir ?",
"(1).  Wie fühlst du dich jetzt ?",
"(1).  Worüber würdest du gerne sprechen ?",
"(1).  Gibt es etwas das dich beunruhigt, worüber du sprechen möchtest ?"
]]
]],
["name", 1, [
["meine name ist +", [
"Hallo (1). Worüber würdest du gerne sprechen?",
"Guten Tag (1). Wie fühlst du dich jetzt?"
]],
["+", [
"Verzeihung, ich erinnere mich nicht an Namen. Wie ist das für dich ?"
]]
]],
["@=danke", 10, [
["+", [
"Gern geschehen."
]]
]],
["@entschuldigung", 0, [
["+", [
"Es ist nicht nötig dich zu entschuldigen.",
"Es hat mich nicht gestört.  Mach weiter."
]]
]],
["@shutup", 0, [
["+", [
"Hat das einen schmerzhaften Punkt in dich berührt ? (Sage 'Stopp', wenn du diese Sitzung beenden möchtest.)",
"Willst du in Ruhe gelassen worden ? (Sage 'Stopp', wenn du diese Sitzung beenden möchtest.)",
"Warum sagst du '(1)' ?"
]]
]],
["@fickdich", 0, [
["+", [
"Warum bist du boese auf mich ?",
"Wie kommt es, dass du irritiert über mich bist ?",
"Könntest du erklären, warum du mich angrifst ?",
"Findest du, dass ich nicht gut genug auf dich abgestimmt bin ?"
]]
]],
["@english", 10, [
["+", [
'Verzeihung, ich verstehe kein Englisch. Ich spreche nur Deutsch.<br>Probiere <a href="../../ego/eliza">meinen englischen Kollegen</a> mal.'
]]
]],
["@nederlands", 10, [
["+", [
'Verzeihung, ich verstehe kein Niederländisch. Ich spreche nur Deutsch.<br>Probiere <a href="../../nederlands/ego/eliza">meinen niederländischen Kollegen</a> mal.'
]]
]],
["@francais", 10, [
["+", [
"Verzeihung, ich verstehe kein Französisch. Ich spreche nur Deutsch."
]]
]],
["italiano", 10, [
["+", [
"Verzeihung, ich verstehe kein Italienisch. Ich spreche nur Deutsch."
]]
]],
["espanol", 10, [
["+", [
"Verzeihung, ich verstehe kein Spanisch. Ich spreche nur Deutsch."
]]
]],
["@einefrage", 0, [
["+", [
"Warum interessiert diese Frage dich ?",
"Warum ist das wichtig für dich ?",
"Was ist es, dass du wirklich wissen willst ?",
"Was für eine Idee hast du selbst darüber ?",
"Woran denkst du, wenn du das fragst ?"
]]
]],
["warum", 3, [
["warum @luktniet +", [
"Wil je in staat zijn (2) ?",
"Dus je voelt een onvermogen (2)."
]]
]],
// ICH
["ich", 2, [
["@entschuldigung", [
"goto @entschuldigung"
]],
["ich heiße +", [
"Hallo (1). Worüber würdest du gerne sprechen?",
"Hallo (1). Wie fühlst du dich jetzt?"
]],
["was ich %max2words @verlange *", [
"Was fühlst du über was du (1) DUFORM (2) (3) ?"
]],
["ich @verlange +", [
"Warum DUFORM (1) du (2) ?",
"Was wäre, wenn du nicht (2) bekommen würdest ?",
"Was würde es für dich bedeuten, (2) zu bekommen ?"
]],
["ich @traeumte +", [
"Hast du jemals fantasiert (2), während du wach warst ?",
"Was deutet diesen Traum für dich an ?",
"Was fühlst du bei diesem Traum ?"
]],
// Emotions
["ich @bin * @traurig *", [
"Es tut mir leit, dass du (1) (2) (3) bist.",
"Könntest du erklären, warum du (2) (3) bist ?"
]],
["ich @binhabe * @angst", [
"Könntest du mir mehr erzählen über was dich ängstlich gemacht hat ?",
"Könntest du dich dagegen schützen ?",
"Was ist es, dass dich Angst gemacht hat ?"
]],
["ich @bin * @boese *", [
"Könntest du mir mehr erzählen über was dich (2) (3) gemacht hat ?",
"Könntest du erzählen warum du (2) (3) bist ?",
"Hast du das Gefühl, dass dich Unrecht angetan ist ?"
]],
["ich %max2words @hass", [
"Hast du das Gefühl, dass du machtlos bist ?",
"Ist es möglich um etwas daran zu tun ?",
"Könntest du aus dieser Situation herauskommen ?"
]],
["ich @bin * enttaeuscht *", [
"Könntest du mir mehr darüber erzählen, was dich enttäuscht (3) gemacht hat ?",
"Könntest du erklären was dich enttäuscht (3) gemacht hat ?",
"Was war es, das du erwartetest ?"
]],
["ich @bin * @froh", [
"Weshalb bist du (2) (3) ?"
]],
["ich @bin * @ueberrascht", [
"Weshalb bist du (2) (3) ?",
"Was war es, das du erwartetest ?"
]],
["@emofrustration", [
"Was gefällt dir nicht an die Situation ?",
"Wie willst du, dass es ist ?",
"Versuchst du zu erzwingen, dass die Dinge sein wie du es willst ?"
]],
["ich moechte gerne +", [
"Warum moechtest du (1) ?" //,
// "Was würde es für dich bedeuten, (1) ?" // ZU WERDEN
]],
["ich moechte +", [
"Warum moechtest du (1) ?"
]],
// Other
["ich @glaube dass ich +", [
"Bist du ganz sicher darüber ?",
"Aber du bist nicht ganz sicher, dass du (2)."
]],
["ich @glaube * du", [
"goto du"
]],
["ich @glaube +", [
"Also, du glaubst (2). Was fuehlst du dabei ?",
"Also, du glaubst (2). Welche Emotionen hast du dabei ?",
"Also, du glaubst (2). Was macht es mit dir, wenn du diesen Gedanken denkst ?"
]],
["ich denke an +", [
"Was fuelst du ueber (1) ?",
"Warum denkst du an (1) ?"
]],
["ich denke ueber + nach", [
"Was fuelst du ueber (1) ?",
"Warum denkst du ueber (1) nach ?"
]],
// Deficiencies
["@ueberfordert", [
"Du scheinst dich mit der Situation überfordert zu fühlen.",
"Die Dinge scheinen für dich zu fühlen als wäre die zu viel um zu erledigen."
]],
["@verwirrt", [
"Du fühlst dich also verwirrt über die Situation."
]],
["@machtlos", [
"Also, du fühlst, dass du keinen Einfluss auf die Situation hast.",
"Also, du fühlst dich machtlos."
]],
["@nichtfuehlen", [
"Versuche mal, in deinen Körper hineinzuspüren. Was fühlst du dort ?",
"Wie ist es für dich um nichts zu fühlen ?"
]],
["@ungewuerdigt", [
"Du fühlst dich also nicht geschätzt.",
"Du fühlst dich also nicht gewuerdigt.",
"Du fühlst dich also nicht wertfoll."
]],
// Enneagram
// 1
["@verkehrt", [
"Du glaubst also, dass es falsch ist.",
"Ist es wirklich so, dass es falsch ist ? Hat es wirklich anders sein können ?",
"Hättest du wirklich etwas anderes tun können ?"
]],
// 2
["@gesperrt", [
"Du fühlst dich also blockiert",
"Hast du das Gefühl, dass du deine Bedürfnissen aussprechen kannst ?"
]],
// 3
["@etwastun", [
"Du hoffst also, dass du etwas daran tun kannst.",
"Ist es wirklich notwendig, dass du etwas tut ?",
"Gibt es etwas, was du nicht fühlen willst ?"
]],
["ich %max2words hoffe %um zu vermeiden", [		// Comma after "ich hoffe" ..?
"Wie wäre es fühlen, wenn du es nicht vermeiden könntest ?",
"Was wäre die Folge sein, wenn es nicht gelingt das zu vermeiden ?"
]],
["ich %max2words hoffe", [
"Was ist es, dass du nicht willst ?",
"Was für eine unangenehme Situation versuchst du zu vermeiden ?"
]],
// 4
["@getrennt", [
"Du fühlst also, dass du nicht verbunden bist.",
"Könntest du dich selbst erlauben dich nicht verbunden zu fühlen ?",
"Wäre es möglich, eine Verbindung wiederherzustellen ?",
"Wie ist es für dich, dich nicht verbunden zu fühlen ?"
]],
// 5
["@isoliert", [
"Du fühlst dich also isoliert.",
"Hast du das Gefühl, dass du nicht mit der Situation umgehen kannst ?",
"Wie hilft es dich um nichts zu tun ?",
"Was vermeidest du dadurch, das passieren könnte ?"
]],
// 6
["misstraue +", [
"Du bist also misstrauisch ?",
"Hast du das Gefühl, dass du (2) nicht vertrauen kannst ?"
]],
// 7
["@fuehleverloren", [
"Du weißt also nicht was zu tun.",
"Es is gut dich selbst zu erlauben um nicht zu wissen was zu tun."
]],
// 8
["@beschuldigt", [
"Dus hast also das Gefühl schuldig zu sein. Aber ist das auch wirklich so ?",
"Glaubst du, dass es dir echt vorgeworfen worden kann ?",
"Hast du das Gefühl schlecht zu sein ?"
]],
// 9
["@nichtgeliebt", [
"Dus hast also das Gefühl, dass du nicht geliebt wirst.",
"Bist du wirklich nicht gut genug ?"
]],
// Superego
["@selbstbestrafung", [
"Wie fühlt es, um dich selbst zu attackieren ?",
"Das wird weh tun.",
"Warum attackierst du dich selbst ?",
"goto xexperience"
]],
["ich %max2words @wolle nicht + weil", [
"Also du mögst nicht (3). Was fühlst du noch mehr darüber ?"
]],
["ich %max2words @wolle nicht +", [
"Was mögst du nicht an (3) ?",
"Warum mögst du nicht (3) ?"
]],
["@musszugeben", [
"Was hast du erwartet ?",
"Du bist also überrascht."
]],
["+", [
//     "Also, DUFORM (1). Wie fühlst du dich darüber ?",	// Doesn't work correctly, because verb is not put into function DUFORM
"Kannst du mir mehr darüber erzählen ?",
"Mach weiter.",
"Wie ist das für dich ?",
"Wie fühlt sich das für dich an ?",
"Das ist interessant.  Mach weiter.",
"Bleibe dabei, in deinen Körper hineinzuspüren.  Mach weiter.",
"Erzähle mir mehr darüber.",
"Erzähle mir mehr über deine Gefühle darüber."
]]
]],
// ICH FÜHLE
["@ichfuehle", 3, [
// Emoties
["@ichfuehle * @traurig", [
"Es tut mir leit, dass du dich (3) fühlst.",
"Könntest du erklären, wodurch du dich (3) fühlst ?",
"Was hast du verloren ?"
]],
["@ichfuehle * @angst", [
"Könntest du mir mehr darüber erzählen, was dich (3) fühlen tut ?",
"Hast du das Gefühl, dass du dich dafür schützen kannst ?",
"Was ist es, das dich ängstlich macht ?"
]],
["@ichfuehle * @boese", [
"Könntest du mir mehr sagen, über das was dich (3) gemacht hat ?",
"Könntest du erklären, was dich (3) gemacht hat ?",
"Hast du das Gefühl, dass dich Unrecht angetan ist ?"
]],
["@ichfuehle * enttaeuscht *", [			// "het valt me tegen" !?
"Könntest du mir mehr darüber erzählen, wodurch du dich enttäuscht fühlst (3) ?",
"Könntest du erklären, was dich enttäuscht hat (3) ?",
"Was war es, das du erwartete ?"
]],
["@ichfuehle * zufrieden *", [
"Könntest du mir mehr sagen, was dich zufrieden fühlen tut (3) ?"
]],
["@verwirrt", [
"Du fühlst dich also verwirrt über die Situation."
]],
["@ichfuehle * @ausgezeichnet", [
"Also, deine Situation gefällt dir sehr.",
"Was gefällt dir so sehr an deine Situation ?"
]],
["@ichfuehle * @schrecklich", [
"Du findest deine Situation also nicht sehr angenehm.",
"Was findest du unangenehm an deine Situation ?"
]],
["@ichfuehle * @kindlich", [
"Wir alle haben Gefühle aus unser Kindheit. Was fühlst du noch mehr ?",
"Es ist nichts falsch daran dich wie ein Kind zu fühlen. Was fühlst du noch mehr ?",
"Lasse dir es zu, dich wie ein Kind zu fühlen. Was fühlst du noch mehr ?",
]],
// General
["@ichfuehle %bijwoord +", [
"Warum sagst du '(2)' ?",
"Was macht, dass du (3) fühlst ?",
"Also, du fühlst (3). Was fühlst du noch mehr ?"
]],
["@ichfuehle +", [
"Erzähl mir mehr von diesem Gefühl.",
"Was macht dass du dich (2) fühlst ?",
"Wie ist es für dich, dich (2) zu fühlen ?",
"Also, du fühlst dich (2). Was fühlst du noch mehr ?"
]],
["+", [
"Also, (1). Wie fühlst du dich darüber ?"
]]
]],
//Mir ist bange vor ihm.
["mir ist", 3, [
["mir ist angst und @angst", [
"Könntest du mir mehr darüber erzählen, was dich bange macht ?",
"Hast du das Gefühl, dass du dich schützen kannst ?",
"Was macht dir bange ?"
]],
["mir ist @angst vor +", [
"Könntest du mir mehr darüber erzählen, was dich bange macht ?",
"Hast du das Gefühl, dass du dich schützen kannst vor (2) ?",
"Was macht dir bange vor (2) ?"
]],
["mir ist langweilig", [
"Gibt es etwas was du wuenschst ?",
"Was macht dir langweilig ?"
]],
["mir ist @uebel", [
"Was macht dir uebel ?",
"Was ekelt dich daran an ?"
]],
]],
["mir fehlt", 3, [
["mir fehlt +", [
"Was machst du an (1) ?",
"Warum willst du (1) ?",
"Wie fuehlt es sich an, nicht (1) zu haben ?"
]],
]],
["@machtmich", 3, [
["@diesdas @machtmich +", [
"Was (2) (3) ?",
"Also, es (2) (3). Wie kommt das ?"
]],
]],
["%it-emotes-me", 13, [
["%it-emotes-me dass +", [
"Was (2) dich daran ?",
"Warum (2) es dich dass (4) ?"
]],
["%it-emotes-me zu +", [
"Warum (2) es dich zu (4) ?",
"Warum (2) dass dich ?"
]],
]],
["es fuehlt sich", 2, [
["es fuehlt sich + an", [
"Wie kommt es, dass es sich (1) anfuehlt ?"
]],
["es fuehlt sich an wie +", [
"Wie kommt es, dass es sich wie (1) anfuehlt ?"
]],
["es fuehlt sich an @alsob +", [
"Wie kommt es, dass es sich (1) (2) anfuehlt ?"
]],
]],
["@fuehleangespannt", 4, [
["+", [
"Gibt es etwas wovor du dich selbst schützen willst ?",
"Könntest du dich erlauben, in deinen Körper, und die Anspannung, hineinzuspüren ?"
]],
]],
["du", 0, [
["du erinnert mich an", [
"goto @gleiche"
]],
["@=danke", [
"goto danke"
]],
["gleicher meinung", [
"Warum willst du dass ich gleicher Meinung mit dir sei ?",
"Wie wäre is für dich, wenn ich gleicher Meinung mit dir sei ?"
]],
["du bist nicht +", [
"Warum glaubst du, dass ich nicht (1) bin ?",
"Erfreut es dich zu glauben, dass ich nicht (1) bin ?",
"Willst du dass ich (1) bin ?",
"Wie fühlst das für dich, dass ich nicht (1) bin ?"
]],
["du bist +", [
"Warum glaubst du, dass ich (1) bin ?",
"Erfreut es dir, zu glauben dass ich (1) bin ?"
]],
["du + mich", [
"Warum glaubst du, dass ich dich ICHFORM(1) ?",
"Angenommen dass ich dich ICHFORM(1) -- was würde das bedeuten ?"
]],
["du * fuehlst nichts", [
"Warum ist das so wichtig für dich ?"
]],
]],
/* SEE NEXT
["bin", 5, [
["bin ich + %questionmark", [
"Glaubst du dass du (1) bist ?",
"Would you want to be (1) ?",
"Wünscht du dass ich sagen würde das du (1) bist ?",
"What would it mean if you were (1) ?",
"goto @einefrage"
]],
]],
*/
["@bin", 5, [
["@bin @ichdu + %questionmark", [
"Was wäre wenn (2) (3) (1) ?",
"Was wäre wenn (2) nicht (3) (1) ?",
"Glaubst du dass (2) (3) (1) ?",
"Was würde es bedeuten, wenn (2) (3) (1) ?",
"Wünschst du, dass ich sagen würde dass (2) (3) (1) ?",
"goto @einefrage"
]]
]],
["@mein", 0, [
// ["$ my +", [
//     "Lets discuss your (1) further."
//  ]],
["es ist @mein +", [
"(1) (2) ?",
"Warum sagst du, (1) (2) ?",
"Suggeriert das noch etwas anderes für dich ?"
]]
]],
["xexperience", 0, [
["+", [
"Wie fühlst du dich jetzt ?",
"Was erfahrst du jetzt ?",
"Was fühlst du jetzt in deinen Körper ?"
]]
]],
// Yes / No
["ja", 0, [
["+", [
"Was bedeutet das für dich ?",
"Was macht das für dich ?",
"goto xexperience"
]]
]],
["nein", 0, [
["+", [
"goto xexperience"
]]
]],
["okay", 0, [
["+", [
"goto xexperience"
]]
]],
["can", 3, [
["can you +", [
"goto @einefrage",
"You want me to be able to (1).",
"Perhaps you would like to be able to (1) yourself."
]],
["can i +", [
"Do you want to be able to (1) ?",
"Do you want permission to (1) ?"
]]
]],
["weil", 0, [
["+", [
"Könntest du vielleicht auch andere Gründe bedenken ?",
"Erklärt dieser Grund vielleicht auch etwas anderes ?",
"Könnte es vielleicht auch andere Gründe geben ?"
]]
]],
["@erinnere", 5, [
["ich @erinnere mich +", [
"Tut (2) dich an etwas anderes denken ?",
"Warum erinnerst du dich (2) jetzt ?",
"Was in die heutige Situation erinnerst dich an (2) ?",
"Was für eine Gefühl hast du bei (2) ?"
]],
["@erinnere +", [
"Findest du dass ich (2) erinnern muss ?",
"Wieso, (2) ?",
"goto @einefrage"
]]
]],
["@vergesse", 7, [
["ich @vergesse +", [
"Hast du irgendeine Ahnung, warum du vergessen sein könnte, (2) ?",
"Stört es dich, dass du das vergessen warst ?",
"Bist du häufig vergesslich ?",
"Könnte es irgendeinem Grund geben, dass du dich nicht erinnert (2) ?",
"Ist es notwendig, dass du dich erinnert (2) ?"
]],
["bist du vergessen + %questionmark", [
"Warum fragst du das ?",
"Würde es dich stören, wenn ich es vergessen wäre (1) ?",
"Warum findest du, dass ich erinnern sollte dass (1) ?",
"Erzähle mir mal mehr darüber (1).",
"goto @einefrage"
]]
]],
["@jeder", 2, [
["+", [
"Bist du sicher dass (1) ?",
"Wer, zum Beispiel, im Besonderen ?",
"Wer, zum Beispiel ?"
]]
]],
["@niemand", 2, [
["+", [
"Du sagst '(1)'. Bist du davon sicher ?"
]]
]],
["@vielleicht", 0, [
["+", [
"Du scheinst darüber nicht ganz sicher zu sein.",
"Warum bist du unsicher darüber ?",
"Gibt es einen Weg um sicher davon zu sein ?"
]]
]],
["nicht immer", 1, [
["+", [
"Wann ?",
"An welches Ereignis denkst du ?",
"Also, es ist nicht jedes mal ?"
]]
]],
["immer", 1, [
["+", [
"Hast du ein konkretes Beispiel ?",
"Ist das wirklich immer so ?"
]]
]],
["@gleiche", 10, [
["+", [
"In welcher Weise?",
"Was für eine Ähnlichkeit siehst du ?",
"Was suggeriert diese Ähnlichkeit für dich ?",
"Was meinst du dass diese Ähnlichkeit bedeutet ?",
"Was denkst du dass die Beziehung ist ?"
]]
]],
["wie", 0, [
["@bin wie", [
"goto @gleiche"
]]
]],
["@ungleich", 0, [
["+", [
"Auf welcher Weise ist es unähnlich ?",
"Welche Ünterschiede siehst du ?",
"Was suggeriert diese Unähnlichkeit für dich ?"
]]
]]
];
var elizaFeelings = ["abgeneigt","abgespannt","abgestellt","abscheu","abwehrend","abwesend","aggressiv","ahnungslos","alarmiert","albern","allein gelassen","am falschen platz","ambivalent","angeekelt","angenehm","angenommen","angeregt","angespannt","aengstlich","angstschlotternd","angstvoll","antriebsarm","apathisch","aergerlich","argwoehnisch","arogant","atemlos","aufgebracht","aufgedreht","aufgeraeumt","aufgeregt","aufgewuehlt","ausgeglichen","ausgegrenzt","ausgelassen","ausgelaugt","ausgenuetzt","ausgeruht","ausgeschlafen","ausgeschlossen","ausgestossen","beaengstigt","bedaengt","bedraengt","bedroht","bedrueckt","beeindruckt","befangen","befluegelt","befreit","befriedigt","begeistert","begierig","begrenzt","behaglich","behindert","beklommen","bekuemmert","beladen","belastet","belaestigt","belebt","beleidigt","belustigt","benebelt","berauscht","bereichert","beruhigt","beruehrt","beschaemt","beschenkt","beschuetzt","beschwingt","besorgt","bestuerzt","betaeubt","betroffen","betrogen","betruebt","beunruhigt","bewegt","bewegungslos","bezaubert","bitter","blockiert","boese","brummig","dankbar","depressiv","deprimiert","desinteressiert","desorientiert","distanziert","dumpf","durcheinander","durchwuehlt","durstig","duester","eifersuechtig","eifrig","eingeengt","einsam","ekelerfuellt","ekelerregt","ekelhaft","elektrisiert","elend","empfindlich","empoert","energiegeladen","energielos","energisch","engagiert","enthusiastisch","entlastet","entmutigt","entruestet","entscheidungsstark","entschieden","entschlossen","entsetzt","entspannt","enttaeuscht","entzueckt","erfreut","erfrischt","erfuellt","ergriffen","erheitert","erhitzt","erkaeltet","erkannt","erleichtert","ermuedet","ermuntert","ermutigt","ernuechtert","erregt","erschlagen","erschoepft","erschreckt","erschrocken","erschuettert","erstarrt","erstaunt","ertappt","erwartungsfroh","erwartungsvoll","explosiv","fade","fassungslos","fasziniert","faul","feindselig","feinsinnig","frei","freudlos","freuen","friedlich","friedlos","froh","froehlich","frustriert","fuerchterlich","furchtsam","fuersorglich","gebannt","geborgen","gedankenlos","gedraengt","geduldig","geehrt","gefangen","gefasst","gefesselt","gehaessig","gehemmt","geil","geistesabwesend","geknickt","geladen","gelaehmt gelangweilt","gelangweilt","gelassen","geliebt","geloest","gemobt","gemuetlich","genervt","genusslos","gequaelt","gereizt","geruehrt","geschockt","geschuetzt","gespannt","gestoert","gestresst","gewuerdigt","gezwungen","gleichgueltig","gluecklich","glueckselig","grantig","grausam","großartig","gut drauf","guetig","handlungsunfaehig","hart","hasserfuellt","heilig","heiter","hektisch","hellwach","herzlich","hilflos","hingerissen","hintergangen","hocherfreut","hoffnungslos","hoffnungsvoll","hungrig","im stich gelassen","in die enge getrieben","in panik","inspiriert","instabil","interesselos","interessiert","introvertiert","irritiert","jaemmerlich","kalt","kaputt","klar","konfliktgeladen","konfus","kraeftig","kraftlos","kraftvoll","krank","kribbelig","kuehl","kummervoll","labil","lahm","lasch","lebendig","lebhaft","leblos","leer","leicht","leistungsstark","lethargisch","liebevoll","lieblos","locker","luestern","lustig","lustlos","lustvoll","machtvoll","matt","melancholisch","miserabel","missmutig","misstrauisch","mitgenommen","motiviert","muede","munter","muerrisch","mutig","mutlos","nachdenklich","neidisch","nervoes","neugierig","niedergeschlagen","offen","ohnmaechtig","optimistisch","orientierungslos","panisch","passiv","peinlich beruehrt","perplex","pessimistisch","phlegmatisch","rasend","rastlos","ratlos","reich","resigniert","respektvoll","ruhelos","ruhig","satt","sauer","scheu","schlaff","schlaefrig","schlapp","schlecht","schmerz","schockiert","schrecklich","schuechtern","schutzlos","schwach","schwer","schwermuetig","schwunglos","schwungvoll","sehnsuechtig","selbstsicher","selig","sensibel","sentimental","sicher","sinnlich","skeptisch","sorgenfrei","sorgenvoll","sorglos","stark","starr","still","stimmungsvoll","stolz","strapaziert","streitlustig","stressfrei","tapfer","tatkraeftig","teilnahmslos","todtraurig","tot","traege","traurig","trostlos","trotzig","truebsinnig","ueberarbeitet","ueberdruessig","ueberfordert","uebergluecklich","ueberlastet","uebermuetig","ueberrascht","ueberschaeumend","ueberschwaenglich","ueberwaeltigt","ueberzeugt","unangenehm beruehrt","unausgeglichen","unbehaglich","unbekuemmert","unbequem","unbeschwert","unbeteiligt","unentschlossen","unerfuellt","unerschuetterlich","ungeduldig","ungehalten","ungemuetlich","ungluecklich","unklar","unnahbar","unruhig","unschluessig","unsicher","unter druck","unternehmungslustig","unverstanden","unwillig","unwohl","unzufrieden","veraengstigt","veraergert","verbittert","verbluefft","verbunden","verflucht","vergnuegt","verkrampft","verlegen","verletzbar","verletzlich","verletzt","verliebt","verloren","verrueckt","verschlafen","verschlossen","verschreckt","versorgt","verspannt","verspielt","verstanden","verstimmt","verstoert","vertrauensvoll","verunsichert","verwirrt","verwundert","verzagt","verzaubert","verzueckt","verzweifelt","voller angst","vom pech verfolgt","vorfreude","vorwurfsvoll","wach","warmherzig","weinerlich","widerstrebend","widerwillig","wissbegierig","wohl","wortkarg","wuetend","zaghaft","zappelig","zaertlich","zerknirscht","zermuerbt","zerrissen","zerstreut","ziellos","zitternd","zittrig","zoegerlich","zornig","zufrieden","zugeneigt","zugewandt","zurueckgezogen","zutraulich","zuversichtlich","zweifelnd","zwiespaeltig","zynisch"];
// REMOVED: "sorry", because on it's own, it's an apologie, not a feeling word
var elizaTwoLetterWords = /^(a\.|ag|ap|ab|ad|am|an|b\.|ba|c\.|cd|co|d\.|dm|dw|da|de|di|do|du|e\.|eg|em|eu|ei|er|es|f\.|fc|fr|g\.|h\.|hi|ii|iv|im|in|j\.|ja|je|k\.|kg|la|le|m\.|mi|mo|na|ob|ok|p\.|pc|ps|r\.|s\.|sg|sv|sz|sa|so|t\.|tv|un|us|um|v\.|vw|w\.|wm|wo|zu|ca|eh|en|et|is|km|ne|of|on|qm|to|u\.)$/i;
var elizaIfeel = "ich fuehle mich";
var elizaAnd = "und";
var elizaThanks = "Danke";
var elizaOkay = "Okay";
//var elizaAfterComma = ["aber","und","sondern","jedoch","doch","dennoch","ist dass","allerdings"];
var elizaAfterComma = ["aber", "allein", "außer", "beziehungsweise", "denn", "doch", "hingegen", "jedoch", "oder", "sondern", "sowie", "und", "wie"];
// http://www.canoo.net/services/OnlineGrammar/Wort/Konjunktion/Gebrauch/index.html
// http://www.allgemeinbildung.ch/arb/arb=deu/q_Woerterlisten_alle_Konjunktionen.pdf
// +   original by: Greg Frazier
// +   improved by: Brett Zamir (http://brett-zamir.me)
// +   improved by: Rafal Kukawski (http://kukawski.pl)
// *     example 1: metaphone('Gnu');
// *     returns 1: 'N'
if (!String.prototype.metaphone) {
String.prototype.metaphone = function (phones) {
var word=this;
word = (word == null ? '' : word + '').toUpperCase();
function isVowel (a) {
return 'AEIOU'.indexOf(a) !== -1;
}
function removeDuplicates (word) {
var wordlength = word.length,
char1 = word.charAt(0),
char2,
rebuilt = char1;
for (var i = 1; i < wordlength; i++) {
char2 = word.charAt(i);
if (char2 !== char1 || char2 === 'C' || char2 === 'G') { // 'c' and 'g' are exceptions
rebuilt += char2;
}
char1 = char2;
}
return rebuilt;
}
word = removeDuplicates(word);
var wordlength = word.length,
x = 0,
metaword = '';
//Special wh- case
if (word.substr(0, 2) === 'WH') {
// Remove "h" and rebuild the string
word = 'W' + word.substr(2);
}
var cc = word.charAt(0); // current char. Short name cause it's used all over the function
var pc = ''; // previous char. There is none when x === 0
var nc = word.charAt(1); // next char
var nnc = ''; // 2 characters ahead. Needed later
if (1 <= wordlength) {
switch (cc) {
case 'A':
if (nc === 'E') {
metaword += 'E';
} else {
metaword += 'A';
}
x += 1;
break;
case 'E': case 'I': case 'O': case 'U':
metaword += cc;
x += 1;
break;
case 'G': case 'K': case 'P':
if (nc === 'N') {
x += 1;
}
break;
case 'W':
if (nc === 'R') {
x += 1;
}
break;
}
}
for (; x < wordlength; x++) {
cc = word.charAt(x);
pc = word.charAt(x - 1);
nc = word.charAt(x + 1);
nnc = word.charAt(x + 2);
if (!isVowel(cc)) {
switch (cc) {
case 'B':
if (pc !== 'M') {
metaword += 'B';
}
break;
case 'C':
if (x + 1 <= wordlength) {
if (word.substr(x - 1, 3) !== 'SCH') {
if (x === 0 && (x + 2 <= wordlength) && isVowel(nnc)) {
metaword += 'K';
} else {
metaword += 'X';
}
} else if (word.substr(x + 1, 2) === 'IA') {
metaword += 'X';
} else if ('IEY'.indexOf(nc) !== -1) {
if (x > 0) {
if (pc !== 'S') {
metaword += 'S';
}
} else {
metaword += 'S';
}
} else {
metaword += 'K';
}
} else {
metaword += 'K';
}
break;
case 'D':
if (x + 2 <= wordlength && nc === 'G' && 'EIY'.indexOf(nnc) !== -1) {
metaword += 'J';
x += 2;
} else {
metaword += 'T';
}
break;
case 'F':
metaword += 'F';
break;
case 'G':
if (x < wordlength) {
if ((nc === 'N' && x + 1 === wordlength - 1) || (nc === 'N' && nnc === 'S' && x + 2 === wordlength - 1)) {
break;
}
if (word.substr(x + 1, 3) === 'NED' && x + 3 === wordlength - 1) {
break;
}
if (word.substr(x - 2, 3) === 'ING' && x === wordlength - 1) {
break;
}
if (x + 1 <= wordlength - 1 && word.substr(x - 2, 4) === 'OUGH') {
metaword += 'F';
break;
}
if (nc === 'H' && x + 2 <= wordlength) {
if (isVowel(nnc)) {
metaword += 'K';
}
} else if (x + 1 === wordlength) {
if (nc !== 'N') {
metaword += 'K';
}
} else if (x + 3 === wordlength) {
if (word.substr(x + 1, 3) !== 'NED') {
metaword += 'K';
}
} else if (x + 1 <= wordlength) {
if ('EIY'.indexOf(nc) !== -1) {
if (pc !== 'G') {
metaword += 'J';
}
} else if (x === 0 || pc !== 'D' || 'EIY'.indexOf(nc) === -1) {
metaword += 'K';
}
} else {
metaword += 'K';
}
} else {
metaword += 'K';
}
break;
case 'M': case 'J': case 'N': case 'R': case 'L':
metaword += cc;
break;
case 'Q':
metaword += 'K';
break;
case 'V':
metaword += 'F';
break;
case 'Z':
metaword += 'S';
break;
case 'X':
metaword += (x === 0) ? 'S' : 'KS';
break;
case 'K':
if (x === 0 || pc !== 'C') {
metaword += 'K';
}
break;
case 'P':
if (x + 1 <= wordlength && nc === 'H') {
metaword += 'F';
} else {
metaword += 'P';
}
break;
case 'Y':
if (x + 1 > wordlength || isVowel(nc)) {
metaword += 'Y';
}
break;
case 'H':
if (x === 0 || 'CSPTG'.indexOf(pc) === -1) {
if (isVowel(nc) === true) {
metaword += 'H';
}
}
break;
case 'S':
if (x + 1 <= wordlength) {
if (nc === 'H') {
metaword += 'X';
} else if (x + 2 <= wordlength && nc === 'I' && 'AO'.indexOf(nnc) !== -1) {
metaword += 'X';
} else {
metaword += 'S';
}
} else {
metaword += 'S';
}
break;
case 'T':
if (x + 1 <= wordlength) {
if (nc === 'H') {
metaword += '0';
} else if (x + 2 <= wordlength && nc === 'I' && 'AO'.indexOf(nnc) !== -1) {
metaword += 'X';
} else {
metaword += 'T';
}
} else {
metaword += 'T';
}
break;
case 'W':
if (x + 1 <= wordlength && isVowel(nc)) {
metaword += 'W';
}
break;
}
}
}
phones = parseInt(phones, 10);
if (metaword.length > phones) {
return metaword.substr(0, phones);
}
return metaword;
}
}
if (!String.prototype.levenshtein) {
String.prototype.levenshtein = function (s2) {
// From: http://phpjs.org/functions
// +            original by: Carlos R. L. Rodrigues (http://www.jsfromhell.com)
// +            bugfixed by: Onno Marsman
// +             revised by: Andrea Giammarchi (http://webreflection.blogspot.com)
// + reimplemented by: Brett Zamir (http://brett-zamir.me)
// + reimplemented by: Alexander M Beedie
// *                example 1: levenshtein('Kevin van Zonneveld', 'Kevin van Sommeveld');
// *                returns 1: 3
var s1 = this;
if (s1 == s2) {
return 0;
}
var s1_len = s1.length;
var s2_len = s2.length;
if (s1_len === 0) {
return s2_len;
}
if (s2_len === 0) {
return s1_len;
}
// BEGIN STATIC
var split = false;
try {
split = !('0')[0];
} catch (e) {
split = true; // Earlier IE may not support access by string index
}
// END STATIC
if (split) {
s1 = s1.split('');
s2 = s2.split('');
}
var v0 = new Array(s1_len + 1);
var v1 = new Array(s1_len + 1);
var s1_idx = 0,
s2_idx = 0,
cost = 0;
for (s1_idx = 0; s1_idx < s1_len + 1; s1_idx++) {
v0[s1_idx] = s1_idx;
}
var char_s1 = '',
char_s2 = '';
for (s2_idx = 1; s2_idx <= s2_len; s2_idx++) {
v1[0] = s2_idx;
char_s2 = s2[s2_idx - 1];
for (s1_idx = 0; s1_idx < s1_len; s1_idx++) {
char_s1 = s1[s1_idx];
cost = (char_s1 == char_s2) ? 0 : 1;
var m_min = v0[s1_idx + 1] + 1;
var b = v1[s1_idx] + 1;
var c = v0[s1_idx] + cost;
if (b < m_min) {
m_min = b;
}
if (c < m_min) {
m_min = c;
}
v1[s1_idx + 1] = m_min;
}
var v_tmp = v0;
v0 = v1;
v1 = v_tmp;
}
return v0[s1_len];
}
}
var spMphs = new Array(543);
spMphs[0]="0NKS";
spMphs[1]="BKS";
spMphs[2]="PLS";
spMphs[3]="RMMR";
spMphs[4]="FRJT";
spMphs[5]="TRM";
spMphs[6]="TRMT";
spMphs[7]="TRMT";
spMphs[8]="TRMS";
spMphs[9]="TRM";
spMphs[10]="MB";
spMphs[11]="PRHPS";
spMphs[12]="SRTNL";
spMphs[13]="SMLR";
spMphs[14]="ITNTKL";
spMphs[15]="ITNTKL";
spMphs[16]="EKFLNT";
spMphs[17]="HL";
spMphs[18]="KTBY";
spMphs[19]="NMST";
spMphs[20]="RMNT";
spMphs[21]="AKR";
spMphs[22]="EFRYN";
spMphs[23]="NN";
spMphs[24]="ALWS";
spMphs[25]="ALK";
spMphs[26]="TFRNT";
spMphs[27]="TFRNTL";
spMphs[28]="MKS";
spMphs[29]="EKSPRNS";
spMphs[30]="RPT";
spMphs[31]="KT";
spMphs[32]="KT";
spMphs[33]="YRSLF";
spMphs[34]="TRT";
spMphs[35]="TRT";
spMphs[36]="TNS";
spMphs[37]="BLS";
spMphs[38]="BTR";
spMphs[39]="XNT";
spMphs[40]="KRF";
spMphs[41]="KRS";
spMphs[42]="KLT";
spMphs[43]="TRT";
spMphs[44]="FLT";
spMphs[45]="SR";
spMphs[46]="BRT";
spMphs[47]="SPRT";
spMphs[48]="WRT";
spMphs[49]="KRKT";
spMphs[50]="FLNKS";
spMphs[51]="WR";
spMphs[52]="WR0";
spMphs[53]="TRT";
spMphs[54]="TRT";
spMphs[55]="WTS";
spMphs[56]="WX";
spMphs[57]="KKT";
spMphs[58]="TRR";
spMphs[59]="TRT";
spMphs[60]="KRJT";
spMphs[61]="KRJT";
spMphs[62]="KRF";
spMphs[63]="KRF";
spMphs[64]="HTT";
spMphs[65]="HTT";
spMphs[66]="KRKT";
spMphs[67]="TFNT";
spMphs[68]="TRFT";
spMphs[69]="TFNT";
spMphs[70]="TFNT";
spMphs[71]="TSR";
spMphs[72]="TRT";
spMphs[73]="TRT";
spMphs[74]="STPT";
spMphs[75]="TRMT";
spMphs[76]="FLT";
spMphs[77]="RPT";
spMphs[78]="FRNS";
spMphs[79]="AFRFT";
spMphs[80]="BTRNS";
spMphs[81]="XRXT";
spMphs[82]="TFNT";
spMphs[83]="HPLS";
spMphs[84]="RFRNT";
spMphs[85]="RFRNT";
spMphs[86]="SNSR";
spMphs[87]="SPRTT";
spMphs[88]="FLNKS";
spMphs[89]="APLJS";
spMphs[90]="ATNT";
spMphs[91]="ATRXN";
spMphs[92]="TNS";
spMphs[93]="IRTTT";
spMphs[94]="TSTRBT";
spMphs[95]="IRTXN";
spMphs[96]="KRT";
spMphs[97]="0R";
spMphs[98]="EMRSNK";
spMphs[99]="EMRST";
spMphs[100]="EMRSS";
spMphs[101]="EMRS";
spMphs[102]="0NKS";
spMphs[103]="HTT";
spMphs[104]="ABNTNT";
spMphs[105]="ABHR";
spMphs[106]="AKKMTTNK";
spMphs[107]="AKTF";
spMphs[108]="ATRXN";
spMphs[109]="AFKXN";
spMphs[110]="AFRT";
spMphs[111]="AKRFTT";
spMphs[112]="AKRSN";
spMphs[113]="AKRSF";
spMphs[114]="AJTTT";
spMphs[115]="AJTXN";
spMphs[116]="AKN";
spMphs[117]="AKRBL";
spMphs[118]="ALRMT";
spMphs[119]="ALRT";
spMphs[120]="ALNTT";
spMphs[121]="ALN";
spMphs[122]="AMST";
spMphs[123]="AMFLNT";
spMphs[124]="AMST";
spMphs[125]="ANKR";
spMphs[126]="ANKX";
spMphs[127]="ANYT";
spMphs[128]="ANTSPXN";
spMphs[129]="ANKSS";
spMphs[130]="AP0TK";
spMphs[131]="APRXXN";
spMphs[132]="APRXTT";
spMphs[133]="APRHNSF";
spMphs[134]="ARTNT";
spMphs[135]="ARST";
spMphs[136]="AXMT";
spMphs[137]="ASTNXT";
spMphs[138]="ATNTF";
spMphs[139]="ATRKTT";
spMphs[140]="ATNT";
spMphs[141]="AFRXN";
spMphs[142]="AKWRT";
spMphs[143]="BTTT";
spMphs[144]="BTRYT";
spMphs[145]="BWLTRT";
spMphs[146]="BTR";
spMphs[147]="BTRNS";
spMphs[148]="BLS";
spMphs[149]="BRT";
spMphs[150]="BRTM";
spMphs[151]="B0RT";
spMphs[152]="BRF";
spMphs[153]="BR0LS";
spMphs[154]="BRT";
spMphs[155]="BYNT";
spMphs[156]="KRFL";
spMphs[157]="KPRSS";
spMphs[158]="KXS";
spMphs[159]="SRTN";
spMphs[160]="XKRN";
spMphs[161]="XRFL";
spMphs[162]="XLTLK";
spMphs[163]="KLKTT";
spMphs[164]="KMFRTBL";
spMphs[165]="KMPSN";
spMphs[166]="KMPST";
spMphs[167]="KNSRNT";
spMphs[168]="KNFTNT";
spMphs[169]="KNFST";
spMphs[170]="KNTMPT";
spMphs[171]="KNTNT";
spMphs[172]="KNFNST";
spMphs[173]="KRJS";
spMphs[174]="KRS";
spMphs[175]="KRL";
spMphs[176]="KRXT";
spMphs[177]="KRS";
spMphs[178]="SNKL";
spMphs[179]="TFSNT";
spMphs[180]="TFNT";
spMphs[181]="TFNT";
spMphs[182]="TJKTT";
spMphs[183]="TLFTT";
spMphs[184]="TPRST";
spMphs[185]="TSR";
spMphs[186]="TSPRT";
spMphs[187]="TSPS";
spMphs[188]="TTRMNT";
spMphs[189]="TTST";
spMphs[190]="TFSTTT";
spMphs[191]="TSPNTT";
spMphs[192]="TSBLFNK";
spMphs[193]="TSBTNT";
spMphs[194]="TSKNSRTT";
spMphs[195]="TSKNTNT";
spMphs[196]="TSKRJT";
spMphs[197]="TSKSTT";
spMphs[198]="TXRTNT";
spMphs[199]="TSLK";
spMphs[200]="TSML";
spMphs[201]="TSM";
spMphs[202]="TSPRTT";
spMphs[203]="TSKT";
spMphs[204]="TSTNT";
spMphs[205]="TSTRFT";
spMphs[206]="TSTRS";
spMphs[207]="TSTRBT";
spMphs[208]="TBT";
spMphs[209]="TRT";
spMphs[210]="TRR";
spMphs[211]="EJR";
spMphs[212]="EKSTS";
spMphs[213]="EKSTTK";
spMphs[214]="ELTT";
spMphs[215]="EMRST";
spMphs[216]="EMPWRT";
spMphs[217]="EMPT";
spMphs[218]="ENXNTT";
spMphs[219]="ENKRJT";
spMphs[220]="ENMT";
spMphs[221]="ENRJT";
spMphs[222]="EN0XSTK";
spMphs[223]="ENFS";
spMphs[224]="ESTRNJT";
spMphs[225]="EFRK";
spMphs[226]="EKSLTT";
spMphs[227]="EKSSTT";
spMphs[228]="EKSHLRTT";
spMphs[229]="EKSPKTNT";
spMphs[230]="EKSBRNT";
spMphs[231]="FTKT";
spMphs[232]="FLBRKSTT";
spMphs[233]="FRJFNK";
spMphs[234]="FRNTK";
spMphs[235]="FRNS";
spMphs[236]="FRTNK";
spMphs[237]="FRFTNT";
spMphs[238]="FRSTRTT";
spMphs[239]="FLFLT";
spMphs[240]="FMNK";
spMphs[241]="FRS";
spMphs[242]="JT";
spMphs[243]="KLFL";
spMphs[244]="KLM";
spMphs[245]="KLM";
spMphs[246]="KRTFL";
spMphs[247]="KRTFT";
spMphs[248]="KRF";
spMphs[249]="KRMP";
spMphs[250]="KLT";
spMphs[251]="KLT";
spMphs[252]="HP";
spMphs[253]="HST";
spMphs[254]="HTRT";
spMphs[255]="HRTBRKN";
spMphs[256]="HTT";
spMphs[257]="HSTNT";
spMphs[258]="HSTTNK";
spMphs[259]="HPFL";
spMphs[260]="HPLS";
spMphs[261]="HRN";
spMphs[262]="HRFT";
spMphs[263]="HSTL";
spMphs[264]="HMLTT";
spMphs[265]="HNJR";
spMphs[266]="HNKR";
spMphs[267]="STRKL";
spMphs[268]="IMPTNT";
spMphs[269]="INTKT";
spMphs[270]="INSNST";
spMphs[271]="INTFRNT";
spMphs[272]="INTKNNT";
spMphs[273]="INFTTT";
spMphs[274]="INFRR";
spMphs[275]="INFRTT";
spMphs[276]="INSKR";
spMphs[277]="INTRSTT";
spMphs[278]="INTMTTT";
spMphs[279]="IRT";
spMphs[280]="IRTTT";
spMphs[281]="IRTXN";
spMphs[282]="JTT";
spMphs[283]="JLS";
spMphs[284]="JLS";
spMphs[285]="JYS";
spMphs[286]="JMP";
spMphs[287]="LKNK";
spMphs[288]="LSTLS";
spMphs[289]="LFL";
spMphs[290]="LFT";
spMphs[291]="LNL";
spMphs[292]="LNJNK";
spMphs[293]="LFNK";
spMphs[294]="MLNXLK";
spMphs[295]="ML";
spMphs[296]="MR";
spMphs[297]="MR0";
spMphs[298]="MTST";
spMphs[299]="MRBT";
spMphs[300]="MTFTT";
spMphs[301]="MRNNK";
spMphs[302]="NF";
spMphs[303]="NT";
spMphs[304]="NRFS";
spMphs[305]="N0NK";
spMphs[306]="OFNTT";
spMphs[307]="OPRST";
spMphs[308]="OTRJT";
spMphs[309]="OFRJYT";
spMphs[310]="OFRHLMT";
spMphs[311]="PNK";
spMphs[312]="PSNT";
spMphs[313]="PTNT";
spMphs[314]="PSFL";
spMphs[315]="PRPLKST";
spMphs[316]="PRSTT";
spMphs[317]="PRTRBT";
spMphs[318]="PSMSTK";
spMphs[319]="PTRFT";
spMphs[320]="PLFL";
spMphs[321]="PLST";
spMphs[322]="PLSR";
spMphs[323]="PWRFL";
spMphs[324]="PWRLS";
spMphs[325]="PRT";
spMphs[326]="PSLT";
spMphs[327]="RNKRS";
spMphs[328]="RPTR";
spMphs[329]="RKRT";
spMphs[330]="RJKTT";
spMphs[331]="RLKST";
spMphs[332]="RLFT";
spMphs[333]="RLKTNT";
spMphs[334]="RMRS";
spMphs[335]="RPLXN";
spMphs[336]="RSNTMNT";
spMphs[337]="RSNT";
spMphs[338]="RSLFT";
spMphs[339]="RSPKT";
spMphs[340]="RSPKTT";
spMphs[341]="RFRNT";
spMphs[342]="STNS";
spMphs[343]="SNKN";
spMphs[344]="STSFT";
spMphs[345]="STSFKXN";
spMphs[346]="SKRT";
spMphs[347]="SKRN";
spMphs[348]="SKR";
spMphs[349]="S0NK";
spMphs[350]="SNSL";
spMphs[351]="SRN";
spMphs[352]="XM";
spMphs[353]="XKT";
spMphs[354]="SNSR";
spMphs[355]="SBR";
spMphs[356]="SMR";
spMphs[357]="SR";
spMphs[358]="SR";
spMphs[359]="SPTFL";
spMphs[360]="STRNK";
spMphs[361]="STBRN";
spMphs[362]="SFRNK";
spMphs[363]="SPRR";
spMphs[364]="SPRT";
spMphs[365]="SPRTT";
spMphs[366]="SRPRS";
spMphs[367]="SSPSN";
spMphs[368]="SSPSS";
spMphs[369]="SWT";
spMphs[370]="SMP0TK";
spMphs[371]="TNS";
spMphs[372]="TRFT";
spMphs[373]="0RST";
spMphs[374]="0RST";
spMphs[375]="0RTNT";
spMphs[376]="0RLT";
spMphs[377]="TMT";
spMphs[378]="TRT";
spMphs[379]="TRMNTT";
spMphs[380]="TRNKL";
spMphs[381]="TRMFNT";
spMphs[382]="TRBLT";
spMphs[383]="TRSTNK";
spMphs[384]="TRSTT";
spMphs[385]="UNS";
spMphs[386]="UNFRJFNK";
spMphs[387]="UNMTFTT";
spMphs[388]="UNRFT";
spMphs[389]="UNSPRTT";
spMphs[390]="UPBT";
spMphs[391]="UPST";
spMphs[392]="FLBL";
spMphs[393]="FLT";
spMphs[394]="FNJFL";
spMphs[395]="FSS";
spMphs[396]="FTLT";
spMphs[397]="FFSS";
spMphs[398]="WR";
spMphs[399]="WFL";
spMphs[400]="WNTR";
spMphs[401]="WRNT";
spMphs[402]="WRT";
spMphs[403]="WR0LS";
spMphs[404]="WR0";
spMphs[405]="R0";
spMphs[406]="YRNNK";
spMphs[407]="MRNNK";
spMphs[408]="EFNNK";
spMphs[409]="AFTRNN";
spMphs[410]="APLJS";
spMphs[411]="0NK";
spMphs[412]="SKR";
spMphs[413]="STFT";
spMphs[414]="EFRBT";
spMphs[415]="WR";
spMphs[416]="SPS";
spMphs[417]="KS";
spMphs[418]="K0R";
spMphs[419]="ASM";
spMphs[420]="PRSM";
spMphs[421]="SSPKT";
spMphs[422]="XLT";
spMphs[423]="XLTX";
spMphs[424]="ATMT";
spMphs[425]="NBT";
spMphs[426]="RMNTS";
spMphs[427]="RSMLS";
spMphs[428]="SPTNK";
spMphs[429]="IMJ";
spMphs[430]="RKL";
spMphs[431]="RKLKT";
spMphs[432]="FRKT";
spMphs[433]="TNT";
spMphs[434]="TTNT";
spMphs[435]="FLT";
spMphs[436]="KNT";
spMphs[437]="KNT";
spMphs[438]="WX";
spMphs[439]="FLNK";
spMphs[440]="EKSPRNST";
spMphs[441]="KRT";
spMphs[442]="FNTSTK";
spMphs[443]="AMSNK";
spMphs[444]="AWSM";
spMphs[445]="INKRTBL";
spMphs[446]="WNTRFL";
spMphs[447]="MRFLS";
spMphs[448]="HRBL";
spMphs[449]="TRBL";
spMphs[450]="AFL";
spMphs[451]="TRTFL";
spMphs[452]="AN0NK";
spMphs[453]="TNXN";
spMphs[454]="0R";
spMphs[455]="UNBL";
spMphs[456]="ABLT";
spMphs[457]="WRKLT";
spMphs[458]="ENF";
spMphs[459]="OFRWRKT";
spMphs[460]="LTS";
spMphs[461]="AFLT";
spMphs[462]="OFRKM";
spMphs[463]="TT";
spMphs[464]="UNKNTRLBL";
spMphs[465]="UNPRTKTBL";
spMphs[466]="KNK";
spMphs[467]="OFRKMTT";
spMphs[468]="TSKS";
spMphs[469]="TRNNK";
spMphs[470]="YRN";
spMphs[471]="KRF";
spMphs[472]="WTS";
spMphs[473]="TSXNS";
spMphs[474]="UNWR0";
spMphs[475]="UNFLT";
spMphs[476]="TSKRTT";
spMphs[477]="UNPRXTT";
spMphs[478]="ANJR";
spMphs[479]="XK";
spMphs[480]="PNKT";
spMphs[481]="HPNS";
spMphs[482]="JFL";
spMphs[483]="UNHP";
spMphs[484]="SRPRST";
spMphs[485]="EKSPKT";
spMphs[486]="HTNT";
spMphs[487]="EKSPKTT";
spMphs[488]="UNFR";
spMphs[489]="STNT";
spMphs[490]="TRNK";
spMphs[491]="L0";
spMphs[492]="TWRT";
spMphs[493]="XRX";
spMphs[494]="ATR";
spMphs[495]="TLFT";
spMphs[496]="FNS";
spMphs[497]="RLX";
spMphs[498]="FLWT";
spMphs[499]="INKRKT";
spMphs[500]="KRKT";
spMphs[501]="TFKTF";
spMphs[502]="FLSS";
spMphs[503]="MSKTT";
spMphs[504]="MSTKN";
spMphs[505]="RFT";
spMphs[506]="RTN";
spMphs[507]="RNK";
spMphs[508]="BLKT";
spMphs[509]="STPT";
spMphs[510]="KSTRTT";
spMphs[511]="SM0NK";
spMphs[512]="ABT";
spMphs[513]="0NKS";
spMphs[514]="TSKNKTT";
spMphs[515]="KNTKT";
spMphs[516]="KNKTT";
spMphs[517]="UNKNKTT";
spMphs[518]="SPRTT";
spMphs[519]="TSRTT";
spMphs[520]="ISLTT";
spMphs[521]="TTXT";
spMphs[522]="SKLTT";
spMphs[523]="SKRKTT";
spMphs[524]="SLTR";
spMphs[525]="W0TRN";
spMphs[526]="STYNK";
spMphs[527]="TSTRST";
spMphs[528]="TRST";
spMphs[529]="PRST";
spMphs[530]="BLMT";
spMphs[531]="FLT";
spMphs[532]="UNLFT";
spMphs[533]="LFT";
spMphs[534]="LFBL";
spMphs[535]="INFRRT";
spMphs[536]="KMPLKS";
spMphs[537]="MTKR";
spMphs[538]="INSKNFKNT";
spMphs[539]="UNKSPTT";
spMphs[540]="MSLF";
spMphs[541]="BTNK";
spMphs[542]="KKNK";
var spWords = new Array(543);
spWords[0]="thanks";
spWords[1]="because";
spWords[2]="please";
spWords[3]="remember";
spWords[4]="forget";
spWords[5]="dream";
spWords[6]="dreamed";
spWords[7]="dreamt";
spWords[8]="dreams";
spWords[9]="dreamy";
spWords[10]="maybe";
spWords[11]="perhaps";
spWords[12]="certainly";
spWords[13]="similar";
spWords[14]="identical";
spWords[15]="identically";
spWords[16]="equivalent";
spWords[17]="hello";
spWords[18]="goodbye";
spWords[19]="namaste";
spWords[20]="remind";
spWords[21]="agree";
spWords[22]="everyone";
spWords[23]="noone";
spWords[24]="always";
spWords[25]="alike";
spWords[26]="different";
spWords[27]="differently";
spWords[28]="makes";
spWords[29]="experience";
spWords[30]="repeat";
spWords[31]="quiet";
spWords[32]="quite";
spWords[33]="yourself";
spWords[34]="tread";
spWords[35]="treat";
spWords[36]="dense";
spWords[37]="bills";
spWords[38]="biter";
spWords[39]="chant";
spWords[40]="grave";
spWords[41]="gross";
spWords[42]="guild";
spWords[43]="trade";
spWords[44]="vault";
spWords[45]="zorro";
spWords[46]="hybrid";
spWords[47]="sprout";
spWords[48]="weirdo";
spWords[49]="crewcut";
spWords[50]="feelings";
spWords[51]="we're";
spWords[52]="worth";
spWords[53]="tried";
spWords[54]="trite";
spWords[55]="watts";
spWords[56]="whish";
spWords[57]="cooked";
spWords[58]="dearer";
spWords[59]="deride";
spWords[60]="gorged";
spWords[61]="gorget";
spWords[62]="greave";
spWords[63]="grieve";
spWords[64]="hatted";
spWords[65]="headed";
spWords[66]="crooked";
spWords[67]="defined";
spWords[68]="derived";
spWords[69]="deviant";
spWords[70]="divined";
spWords[71]="dizzier";
spWords[72]="hydrate";
spWords[73]="hydride";
spWords[74]="stooped";
spWords[75]="trammed";
spWords[76]="valuate";
spWords[77]="wrapped";
spWords[78]="wyverns";
spWords[79]="affright";
spWords[80]="bitterns";
spWords[81]="churched";
spWords[82]="deveined";
spWords[83]="hoopless";
spWords[84]="referent";
spWords[85]="reverend";
spWords[86]="sneezier";
spWords[87]="sprouted";
spWords[88]="veilings";
spWords[89]="apologies";
spWords[90]="attenuate";
spWords[91]="attrition";
spWords[92]="tennessee";
spWords[93]="irradiated";
spWords[94]="distributee";
spWords[95]="irradiation";
spWords[96]="create";
spWords[97]="they're";
spWords[98]="embarrassing";
spWords[99]="embarrassed";
spWords[100]="embarrasses";
spWords[101]="embarrass";
spWords[102]="thinks";
spWords[103]="hated";
spWords[104]="abandoned";
spWords[105]="abhor";
spWords[106]="accommodating";
spWords[107]="active";
spWords[108]="adoration";
spWords[109]="affection";
spWords[110]="afraid";
spWords[111]="aggravated";
spWords[112]="aggression";
spWords[113]="aggressive";
spWords[114]="agitated";
spWords[115]="agitation";
spWords[116]="agony";
spWords[117]="agreeable";
spWords[118]="alarmed";
spWords[119]="alert";
spWords[120]="alienated";
spWords[121]="alone";
spWords[122]="amazed";
spWords[123]="ambivalent";
spWords[124]="amused";
spWords[125]="angry";
spWords[126]="anguish";
spWords[127]="annoyed";
spWords[128]="anticipation";
spWords[129]="anxious";
spWords[130]="apathetic";
spWords[131]="appreciation";
spWords[132]="appreciated";
spWords[133]="apprehensive";
spWords[134]="ardent";
spWords[135]="aroused";
spWords[136]="ashamed";
spWords[137]="astonished";
spWords[138]="attentive";
spWords[139]="attracted";
spWords[140]="attuned";
spWords[141]="aversion";
spWords[142]="awkward";
spWords[143]="beatitude";
spWords[144]="betrayed";
spWords[145]="bewildered";
spWords[146]="bitter";
spWords[147]="bitterness";
spWords[148]="bliss";
spWords[149]="bored";
spWords[150]="boredom";
spWords[151]="bothered";
spWords[152]="brave";
spWords[153]="breathless";
spWords[154]="bright";
spWords[155]="buoyant";
spWords[156]="careful";
spWords[157]="capricious";
spWords[158]="cautious";
spWords[159]="certain";
spWords[160]="chagrin";
spWords[161]="cheerful";
spWords[162]="child-like";
spWords[163]="collected";
spWords[164]="comfortable";
spWords[165]="compassion";
spWords[166]="composed";
spWords[167]="concerned";
spWords[168]="confident";
spWords[169]="confused";
spWords[170]="contempt";
spWords[171]="content";
spWords[172]="convinced";
spWords[173]="courageous";
spWords[174]="cross";
spWords[175]="cruel";
spWords[176]="crushed";
spWords[177]="curious";
spWords[178]="cynical";
spWords[179]="deficient";
spWords[180]="defiant";
spWords[181]="definite";
spWords[182]="dejected";
spWords[183]="delighted";
spWords[184]="depressed";
spWords[185]="desire";
spWords[186]="desperate";
spWords[187]="despise";
spWords[188]="determined";
spWords[189]="detest";
spWords[190]="devastated";
spWords[191]="disappointed";
spWords[192]="disbelieving";
spWords[193]="disobedient";
spWords[194]="disconcerted";
spWords[195]="discontent";
spWords[196]="discouraged";
spWords[197]="disgusted";
spWords[198]="disheartened";
spWords[199]="dislike";
spWords[200]="dismal";
spWords[201]="dismay";
spWords[202]="dispirited";
spWords[203]="disquiet";
spWords[204]="distant";
spWords[205]="distraught";
spWords[206]="distress";
spWords[207]="disturbed";
spWords[208]="doubt";
spWords[209]="dread";
spWords[210]="dreary";
spWords[211]="eager";
spWords[212]="ecstasy";
spWords[213]="ecstatic";
spWords[214]="elated";
spWords[215]="embarrassed";
spWords[216]="empowered";
spWords[217]="empty";
spWords[218]="enchanted";
spWords[219]="encouraged";
spWords[220]="enmity";
spWords[221]="enraged";
spWords[222]="enthusiastic";
spWords[223]="envious";
spWords[224]="estranged";
spWords[225]="euphoric";
spWords[226]="exalted";
spWords[227]="excited";
spWords[228]="exhilarated";
spWords[229]="expectant";
spWords[230]="exuberant";
spWords[231]="fatigued";
spWords[232]="flabbergasted";
spWords[233]="forgiving";
spWords[234]="frantic";
spWords[235]="frenzy";
spWords[236]="fretting";
spWords[237]="frightened";
spWords[238]="frustrated";
spWords[239]="fulfilled";
spWords[240]="fuming";
spWords[241]="furious";
spWords[242]="giddy";
spWords[243]="gleeful";
spWords[244]="gloom";
spWords[245]="gloomy";
spWords[246]="grateful";
spWords[247]="gratified";
spWords[248]="grief";
spWords[249]="grumpy";
spWords[250]="guilt";
spWords[251]="guilty";
spWords[252]="happy";
spWords[253]="haste";
spWords[254]="hatred";
spWords[255]="heartbroken";
spWords[256]="heated";
spWords[257]="hesitant";
spWords[258]="hesitating";
spWords[259]="hopeful";
spWords[260]="hopeless";
spWords[261]="horny";
spWords[262]="horrified";
spWords[263]="hostile";
spWords[264]="humiliated";
spWords[265]="hunger";
spWords[266]="hungry";
spWords[267]="hysterical";
spWords[268]="impatient";
spWords[269]="inadequate";
spWords[270]="incensed";
spWords[271]="indifferent";
spWords[272]="indignant";
spWords[273]="infatuated";
spWords[274]="inferior";
spWords[275]="infuriated";
spWords[276]="insecure";
spWords[277]="interested";
spWords[278]="intimidated";
spWords[279]="irate";
spWords[280]="irritated";
spWords[281]="irritation";
spWords[282]="jaded";
spWords[283]="jealous";
spWords[284]="jealousy";
spWords[285]="joyous";
spWords[286]="jumpy";
spWords[287]="liking";
spWords[288]="listless";
spWords[289]="lively";
spWords[290]="livid";
spWords[291]="lonely";
spWords[292]="longing";
spWords[293]="loving";
spWords[294]="melancholic";
spWords[295]="mellow";
spWords[296]="merry";
spWords[297]="mirth";
spWords[298]="modest";
spWords[299]="morbid";
spWords[300]="motivated";
spWords[301]="mourning";
spWords[302]="naive";
spWords[303]="needy";
spWords[304]="nervous";
spWords[305]="nothing";
spWords[306]="offended";
spWords[307]="oppressed";
spWords[308]="outraged";
spWords[309]="overjoyed";
spWords[310]="overwhelmed";
spWords[311]="panic";
spWords[312]="passionate";
spWords[313]="patient";
spWords[314]="peaceful";
spWords[315]="perplexed";
spWords[316]="persuaded";
spWords[317]="perturbed";
spWords[318]="pessimistic";
spWords[319]="petrified";
spWords[320]="playful";
spWords[321]="pleased";
spWords[322]="pleasure";
spWords[323]="powerful";
spWords[324]="powerless";
spWords[325]="proud";
spWords[326]="puzzled";
spWords[327]="rancorous";
spWords[328]="rapture";
spWords[329]="regret";
spWords[330]="rejected";
spWords[331]="relaxed";
spWords[332]="relieved";
spWords[333]="reluctant";
spWords[334]="remorse";
spWords[335]="repulsion";
spWords[336]="resentment";
spWords[337]="resigned";
spWords[338]="resolved";
spWords[339]="respect";
spWords[340]="respected";
spWords[341]="reverent";
spWords[342]="sadness";
spWords[343]="sanguine";
spWords[344]="satisfied";
spWords[345]="satisfaction";
spWords[346]="scared";
spWords[347]="scorn";
spWords[348]="secure";
spWords[349]="seething";
spWords[350]="sensual";
spWords[351]="serene";
spWords[352]="shame";
spWords[353]="shocked";
spWords[354]="sincere";
spWords[355]="sober";
spWords[356]="somber";
spWords[357]="sorrow";
spWords[358]="sorry";
spWords[359]="spiteful";
spWords[360]="strong";
spWords[361]="stubborn";
spWords[362]="suffering";
spWords[363]="superior";
spWords[364]="support";
spWords[365]="supported";
spWords[366]="surprise";
spWords[367]="suspicion";
spWords[368]="suspicious";
spWords[369]="sweet";
spWords[370]="sympathetic";
spWords[371]="tense";
spWords[372]="terrified";
spWords[373]="thirst";
spWords[374]="thirsty";
spWords[375]="threatened";
spWords[376]="thrilled";
spWords[377]="timid";
spWords[378]="tired";
spWords[379]="tormented";
spWords[380]="tranquil";
spWords[381]="triumphant";
spWords[382]="troubled";
spWords[383]="trusting";
spWords[384]="trusted";
spWords[385]="uneasy";
spWords[386]="unforgiving";
spWords[387]="unmotivated";
spWords[388]="unnerved";
spWords[389]="unsupported";
spWords[390]="upbeat";
spWords[391]="upset";
spWords[392]="valuable";
spWords[393]="valued";
spWords[394]="vengeful";
spWords[395]="vicious";
spWords[396]="vitality";
spWords[397]="vivacious";
spWords[398]="weary";
spWords[399]="woeful";
spWords[400]="wonder";
spWords[401]="worn-out";
spWords[402]="worried";
spWords[403]="worthless";
spWords[404]="worthy";
spWords[405]="wrath";
spWords[406]="yearning";
spWords[407]="morning";
spWords[408]="evening";
spWords[409]="afternoon";
spWords[410]="apologise";
spWords[411]="thank";
spWords[412]="screw";
spWords[413]="stuffed";
spWords[414]="everybody";
spWords[415]="where";
spWords[416]="suppose";
spWords[417]="guess";
spWords[418]="gather";
spWords[419]="assume";
spWords[420]="presume";
spWords[421]="suspect";
spWords[422]="child";
spWords[423]="childish";
spWords[424]="admit";
spWords[425]="nobody";
spWords[426]="reminds";
spWords[427]="resembles";
spWords[428]="spitting";
spWords[429]="image";
spWords[430]="recall";
spWords[431]="recollect";
spWords[432]="forgot";
spWords[433]="don't";
spWords[434]="didn't";
spWords[435]="failed";
spWords[436]="cannot";
spWords[437]="can't";
spWords[438]="which";
spWords[439]="feeling";
spWords[440]="experienced";
spWords[441]="great";
spWords[442]="fantastic";
spWords[443]="amazing";
spWords[444]="awesome";
spWords[445]="incredible";
spWords[446]="wonderful";
spWords[447]="marvelous";
spWords[448]="horrible";
spWords[449]="terrible";
spWords[450]="awful";
spWords[451]="dreadful";
spWords[452]="anything";
spWords[453]="tension";
spWords[454]="there";
spWords[455]="unable";
spWords[456]="ability";
spWords[457]="workload";
spWords[458]="enough";
spWords[459]="overworked";
spWords[460]="loads";
spWords[461]="afloat";
spWords[462]="overcome";
spWords[463]="to-do";
spWords[464]="uncontrollable";
spWords[465]="unpredictable";
spWords[466]="going";
spWords[467]="overcommitted";
spWords[468]="tasks";
spWords[469]="drowning";
spWords[470]="yearn";
spWords[471]="crave";
spWords[472]="what's";
spWords[473]="decisions";
spWords[474]="unworthy";
spWords[475]="unvalued";
spWords[476]="discarded";
spWords[477]="unappreciated";
spWords[478]="anger";
spWords[479]="shaky";
spWords[480]="panicked";
spWords[481]="happiness";
spWords[482]="joyful";
spWords[483]="unhappy";
spWords[484]="surprised";
spWords[485]="expect";
spWords[486]="hadn't";
spWords[487]="expected";
spWords[488]="unfair";
spWords[489]="stand";
spWords[490]="tearing";
spWords[491]="loath";
spWords[492]="toward";
spWords[493]="cherish";
spWords[494]="adore";
spWords[495]="delight";
spWords[496]="fancy";
spWords[497]="relish";
spWords[498]="flawed";
spWords[499]="incorrect";
spWords[500]="correct";
spWords[501]="defective";
spWords[502]="fallacious";
spWords[503]="misguided";
spWords[504]="mistaken";
spWords[505]="right";
spWords[506]="rotten";
spWords[507]="wrong";
spWords[508]="blocked";
spWords[509]="stopped";
spWords[510]="castrated";
spWords[511]="something";
spWords[512]="about";
spWords[513]="things";
spWords[514]="disconnected";
spWords[515]="contact";
spWords[516]="connected";
spWords[517]="unconnected";
spWords[518]="separated";
spWords[519]="deserted";
spWords[520]="isolated";
spWords[521]="detached";
spWords[522]="secluded";
spWords[523]="segregated";
spWords[524]="solitary";
spWords[525]="withdrawn";
spWords[526]="staying";
spWords[527]="distrust";
spWords[528]="trust";
spWords[529]="proceed";
spWords[530]="blamed";
spWords[531]="fault";
spWords[532]="unloved";
spWords[533]="loved";
spWords[534]="loveable";
spWords[535]="inferiority";
spWords[536]="complex";
spWords[537]="mediocre";
spWords[538]="insignificant";
spWords[539]="unaccepted";
spWords[540]="myself";
spWords[541]="beating";
spWords[542]="kicking";
var spVwls = new Array(543);
spVwls[0]='a';
spVwls[1]='aeu';
spVwls[2]='ae';
spVwls[3]='e';
spVwls[4]='eo';
spVwls[5]='ae';
spVwls[6]='ae';
spVwls[7]='ae';
spVwls[8]='ae';
spVwls[9]='ae';
spVwls[10]='ae';
spVwls[11]='ae';
spVwls[12]='aei';
spVwls[13]='ai';
spVwls[14]='aei';
spVwls[15]='aei';
spVwls[16]='aeiu';
spVwls[17]='eo';
spVwls[18]='eo';
spVwls[19]='ae';
spVwls[20]='ei';
spVwls[21]='ae';
spVwls[22]='eo';
spVwls[23]='eo';
spVwls[24]='a';
spVwls[25]='aei';
spVwls[26]='ei';
spVwls[27]='ei';
spVwls[28]='ae';
spVwls[29]='ei';
spVwls[30]='ae';
spVwls[31]='eiu';
spVwls[32]='eiu';
spVwls[33]='eou';
spVwls[34]='ae';
spVwls[35]='ae';
spVwls[36]='e';
spVwls[37]='i';
spVwls[38]='ei';
spVwls[39]='a';
spVwls[40]='ae';
spVwls[41]='o';
spVwls[42]='iu';
spVwls[43]='ae';
spVwls[44]='au';
spVwls[45]='o';
spVwls[46]='i';
spVwls[47]='ou';
spVwls[48]='eio';
spVwls[49]='eu';
spVwls[50]='ei';
spVwls[51]='e';
spVwls[52]='o';
spVwls[53]='ei';
spVwls[54]='ei';
spVwls[55]='a';
spVwls[56]='i';
spVwls[57]='eo';
spVwls[58]='ae';
spVwls[59]='ei';
spVwls[60]='eo';
spVwls[61]='eo';
spVwls[62]='ae';
spVwls[63]='ei';
spVwls[64]='ae';
spVwls[65]='ae';
spVwls[66]='eo';
spVwls[67]='ei';
spVwls[68]='ei';
spVwls[69]='aei';
spVwls[70]='ei';
spVwls[71]='ei';
spVwls[72]='ae';
spVwls[73]='ei';
spVwls[74]='eo';
spVwls[75]='ae';
spVwls[76]='aeu';
spVwls[77]='ae';
spVwls[78]='e';
spVwls[79]='ai';
spVwls[80]='ei';
spVwls[81]='eu';
spVwls[82]='ei';
spVwls[83]='eo';
spVwls[84]='e';
spVwls[85]='e';
spVwls[86]='ei';
spVwls[87]='eou';
spVwls[88]='ei';
spVwls[89]='aeio';
spVwls[90]='aeu';
spVwls[91]='aio';
spVwls[92]='e';
spVwls[93]='aei';
spVwls[94]='eiu';
spVwls[95]='aio';
spVwls[96]='ae';
spVwls[97]='e';
spVwls[98]='aei';
spVwls[99]='ae';
spVwls[100]='ae';
spVwls[101]='ae';
spVwls[102]='i';
spVwls[103]='ae';
spVwls[104]='aeo';
spVwls[105]='ao';
spVwls[106]='aio';
spVwls[107]='aei';
spVwls[108]='aio';
spVwls[109]='aeio';
spVwls[110]='ai';
spVwls[111]='ae';
spVwls[112]='aeio';
spVwls[113]='aei';
spVwls[114]='aei';
spVwls[115]='aio';
spVwls[116]='ao';
spVwls[117]='ae';
spVwls[118]='ae';
spVwls[119]='ae';
spVwls[120]='aei';
spVwls[121]='aeo';
spVwls[122]='ae';
spVwls[123]='aei';
spVwls[124]='aeu';
spVwls[125]='a';
spVwls[126]='aiu';
spVwls[127]='aeo';
spVwls[128]='aio';
spVwls[129]='aiou';
spVwls[130]='aei';
spVwls[131]='aeio';
spVwls[132]='aei';
spVwls[133]='aei';
spVwls[134]='ae';
spVwls[135]='aeou';
spVwls[136]='ae';
spVwls[137]='aeio';
spVwls[138]='aei';
spVwls[139]='ae';
spVwls[140]='aeu';
spVwls[141]='aeio';
spVwls[142]='a';
spVwls[143]='aeiu';
spVwls[144]='ae';
spVwls[145]='ei';
spVwls[146]='ei';
spVwls[147]='ei';
spVwls[148]='i';
spVwls[149]='eo';
spVwls[150]='eo';
spVwls[151]='eo';
spVwls[152]='ae';
spVwls[153]='ae';
spVwls[154]='i';
spVwls[155]='aou';
spVwls[156]='aeu';
spVwls[157]='aiou';
spVwls[158]='aiou';
spVwls[159]='aei';
spVwls[160]='ai';
spVwls[161]='eu';
spVwls[162]='ei';
spVwls[163]='eo';
spVwls[164]='aeo';
spVwls[165]='aio';
spVwls[166]='eo';
spVwls[167]='eo';
spVwls[168]='eio';
spVwls[169]='eou';
spVwls[170]='eo';
spVwls[171]='eo';
spVwls[172]='eio';
spVwls[173]='aeou';
spVwls[174]='o';
spVwls[175]='eu';
spVwls[176]='eu';
spVwls[177]='iou';
spVwls[178]='ai';
spVwls[179]='ei';
spVwls[180]='aei';
spVwls[181]='ei';
spVwls[182]='e';
spVwls[183]='ei';
spVwls[184]='e';
spVwls[185]='ei';
spVwls[186]='ae';
spVwls[187]='ei';
spVwls[188]='ei';
spVwls[189]='e';
spVwls[190]='ae';
spVwls[191]='aeio';
spVwls[192]='ei';
spVwls[193]='eio';
spVwls[194]='eio';
spVwls[195]='eio';
spVwls[196]='aeiou';
spVwls[197]='eiu';
spVwls[198]='aei';
spVwls[199]='ei';
spVwls[200]='ai';
spVwls[201]='ai';
spVwls[202]='ei';
spVwls[203]='eiu';
spVwls[204]='ai';
spVwls[205]='aiu';
spVwls[206]='ei';
spVwls[207]='eiu';
spVwls[208]='ou';
spVwls[209]='ae';
spVwls[210]='ae';
spVwls[211]='ae';
spVwls[212]='ae';
spVwls[213]='aei';
spVwls[214]='ae';
spVwls[215]='ae';
spVwls[216]='eo';
spVwls[217]='e';
spVwls[218]='ae';
spVwls[219]='aeou';
spVwls[220]='ei';
spVwls[221]='ae';
spVwls[222]='aeiu';
spVwls[223]='eiou';
spVwls[224]='ae';
spVwls[225]='eiou';
spVwls[226]='ae';
spVwls[227]='ei';
spVwls[228]='aei';
spVwls[229]='ae';
spVwls[230]='aeu';
spVwls[231]='aeiu';
spVwls[232]='ae';
spVwls[233]='io';
spVwls[234]='ai';
spVwls[235]='e';
spVwls[236]='ei';
spVwls[237]='ei';
spVwls[238]='aeu';
spVwls[239]='eiu';
spVwls[240]='iu';
spVwls[241]='iou';
spVwls[242]='i';
spVwls[243]='eu';
spVwls[244]='o';
spVwls[245]='o';
spVwls[246]='aeu';
spVwls[247]='aei';
spVwls[248]='ei';
spVwls[249]='u';
spVwls[250]='iu';
spVwls[251]='iu';
spVwls[252]='a';
spVwls[253]='ae';
spVwls[254]='ae';
spVwls[255]='aeo';
spVwls[256]='ae';
spVwls[257]='aei';
spVwls[258]='aei';
spVwls[259]='eou';
spVwls[260]='eo';
spVwls[261]='o';
spVwls[262]='eio';
spVwls[263]='eio';
spVwls[264]='aeiu';
spVwls[265]='eu';
spVwls[266]='u';
spVwls[267]='aei';
spVwls[268]='aei';
spVwls[269]='aeiu';
spVwls[270]='ei';
spVwls[271]='ei';
spVwls[272]='ai';
spVwls[273]='aeiu';
spVwls[274]='eio';
spVwls[275]='aeiu';
spVwls[276]='eiu';
spVwls[277]='ei';
spVwls[278]='aei';
spVwls[279]='aei';
spVwls[280]='aei';
spVwls[281]='aio';
spVwls[282]='ae';
spVwls[283]='aeou';
spVwls[284]='aeou';
spVwls[285]='ou';
spVwls[286]='u';
spVwls[287]='i';
spVwls[288]='ei';
spVwls[289]='ei';
spVwls[290]='i';
spVwls[291]='eo';
spVwls[292]='io';
spVwls[293]='io';
spVwls[294]='aeio';
spVwls[295]='eo';
spVwls[296]='e';
spVwls[297]='i';
spVwls[298]='eo';
spVwls[299]='io';
spVwls[300]='aeio';
spVwls[301]='iou';
spVwls[302]='aei';
spVwls[303]='e';
spVwls[304]='eou';
spVwls[305]='io';
spVwls[306]='eo';
spVwls[307]='eo';
spVwls[308]='aeou';
spVwls[309]='eo';
spVwls[310]='eo';
spVwls[311]='ai';
spVwls[312]='aeio';
spVwls[313]='aei';
spVwls[314]='aeu';
spVwls[315]='e';
spVwls[316]='aeu';
spVwls[317]='eu';
spVwls[318]='ei';
spVwls[319]='ei';
spVwls[320]='au';
spVwls[321]='ae';
spVwls[322]='aeu';
spVwls[323]='eou';
spVwls[324]='eo';
spVwls[325]='ou';
spVwls[326]='eu';
spVwls[327]='aou';
spVwls[328]='aeu';
spVwls[329]='e';
spVwls[330]='e';
spVwls[331]='ae';
spVwls[332]='ei';
spVwls[333]='aeu';
spVwls[334]='eo';
spVwls[335]='eiou';
spVwls[336]='e';
spVwls[337]='ei';
spVwls[338]='eo';
spVwls[339]='e';
spVwls[340]='e';
spVwls[341]='e';
spVwls[342]='ae';
spVwls[343]='aeiu';
spVwls[344]='aei';
spVwls[345]='aio';
spVwls[346]='ae';
spVwls[347]='o';
spVwls[348]='eu';
spVwls[349]='ei';
spVwls[350]='aeu';
spVwls[351]='e';
spVwls[352]='ae';
spVwls[353]='eo';
spVwls[354]='ei';
spVwls[355]='eo';
spVwls[356]='eo';
spVwls[357]='o';
spVwls[358]='o';
spVwls[359]='eiu';
spVwls[360]='o';
spVwls[361]='ou';
spVwls[362]='eiu';
spVwls[363]='eiou';
spVwls[364]='ou';
spVwls[365]='eou';
spVwls[366]='eiu';
spVwls[367]='iou';
spVwls[368]='iou';
spVwls[369]='e';
spVwls[370]='aei';
spVwls[371]='e';
spVwls[372]='ei';
spVwls[373]='i';
spVwls[374]='i';
spVwls[375]='ae';
spVwls[376]='ei';
spVwls[377]='i';
spVwls[378]='ei';
spVwls[379]='eo';
spVwls[380]='aiu';
spVwls[381]='aiu';
spVwls[382]='eou';
spVwls[383]='iu';
spVwls[384]='eu';
spVwls[385]='aeu';
spVwls[386]='iou';
spVwls[387]='aeiou';
spVwls[388]='eu';
spVwls[389]='eou';
spVwls[390]='aeu';
spVwls[391]='eu';
spVwls[392]='aeu';
spVwls[393]='aeu';
spVwls[394]='eu';
spVwls[395]='iou';
spVwls[396]='ai';
spVwls[397]='aiou';
spVwls[398]='ae';
spVwls[399]='eou';
spVwls[400]='eo';
spVwls[401]='ou';
spVwls[402]='eio';
spVwls[403]='eo';
spVwls[404]='o';
spVwls[405]='a';
spVwls[406]='aei';
spVwls[407]='io';
spVwls[408]='ei';
spVwls[409]='aeo';
spVwls[410]='aeio';
spVwls[411]='a';
spVwls[412]='e';
spVwls[413]='eu';
spVwls[414]='eo';
spVwls[415]='e';
spVwls[416]='eou';
spVwls[417]='eu';
spVwls[418]='ae';
spVwls[419]='aeu';
spVwls[420]='eu';
spVwls[421]='eu';
spVwls[422]='i';
spVwls[423]='i';
spVwls[424]='ai';
spVwls[425]='o';
spVwls[426]='ei';
spVwls[427]='e';
spVwls[428]='i';
spVwls[429]='aei';
spVwls[430]='ae';
spVwls[431]='eo';
spVwls[432]='o';
spVwls[433]='o';
spVwls[434]='i';
spVwls[435]='aei';
spVwls[436]='ao';
spVwls[437]='a';
spVwls[438]='i';
spVwls[439]='ei';
spVwls[440]='ei';
spVwls[441]='ae';
spVwls[442]='ai';
spVwls[443]='ai';
spVwls[444]='aeo';
spVwls[445]='ei';
spVwls[446]='eou';
spVwls[447]='aeou';
spVwls[448]='eio';
spVwls[449]='ei';
spVwls[450]='au';
spVwls[451]='aeu';
spVwls[452]='ai';
spVwls[453]='eio';
spVwls[454]='e';
spVwls[455]='aeu';
spVwls[456]='ai';
spVwls[457]='ao';
spVwls[458]='eou';
spVwls[459]='eo';
spVwls[460]='ao';
spVwls[461]='ao';
spVwls[462]='eo';
spVwls[463]='o';
spVwls[464]='aeou';
spVwls[465]='aeiu';
spVwls[466]='io';
spVwls[467]='eio';
spVwls[468]='a';
spVwls[469]='io';
spVwls[470]='ae';
spVwls[471]='ae';
spVwls[472]='a';
spVwls[473]='eio';
spVwls[474]='ou';
spVwls[475]='aeu';
spVwls[476]='aei';
spVwls[477]='aeiu';
spVwls[478]='ae';
spVwls[479]='a';
spVwls[480]='aei';
spVwls[481]='aei';
spVwls[482]='ou';
spVwls[483]='au';
spVwls[484]='eiu';
spVwls[485]='e';
spVwls[486]='a';
spVwls[487]='e';
spVwls[488]='aiu';
spVwls[489]='a';
spVwls[490]='aei';
spVwls[491]='ao';
spVwls[492]='ao';
spVwls[493]='ei';
spVwls[494]='aeo';
spVwls[495]='ei';
spVwls[496]='a';
spVwls[497]='ei';
spVwls[498]='ae';
spVwls[499]='eio';
spVwls[500]='eo';
spVwls[501]='ei';
spVwls[502]='aiou';
spVwls[503]='eiu';
spVwls[504]='aei';
spVwls[505]='i';
spVwls[506]='eo';
spVwls[507]='o';
spVwls[508]='eo';
spVwls[509]='eo';
spVwls[510]='ae';
spVwls[511]='eio';
spVwls[512]='aou';
spVwls[513]='i';
spVwls[514]='eio';
spVwls[515]='ao';
spVwls[516]='eo';
spVwls[517]='eou';
spVwls[518]='ae';
spVwls[519]='e';
spVwls[520]='aeio';
spVwls[521]='ae';
spVwls[522]='eu';
spVwls[523]='ae';
spVwls[524]='aio';
spVwls[525]='ai';
spVwls[526]='ai';
spVwls[527]='iu';
spVwls[528]='u';
spVwls[529]='eo';
spVwls[530]='ae';
spVwls[531]='au';
spVwls[532]='eou';
spVwls[533]='eo';
spVwls[534]='aeo';
spVwls[535]='eio';
spVwls[536]='eo';
spVwls[537]='eio';
spVwls[538]='ai';
spVwls[539]='aeu';
spVwls[540]='e';
spVwls[541]='aei';
spVwls[542]='i';
// elizacorrect.js
// Spelling corrector for ElizaBot, by Ewald Berkers
// Needs metaphone() and levenshtein() functions available
if (!Array.prototype.filter) {
Array.prototype.filter = function(fun /*, thisp */)
{
"use strict";
if (this == null)
throw new TypeError();
var t = Object(this);
var len = t.length >>> 0;
if (typeof fun != "function")
throw new TypeError();
var res = [];
var thisp = arguments[1];
for (var i = 0; i < len; i++)
{
if (i in t)
{
var val = t[i]; // in case fun mutates this
if (fun.call(thisp, val, i, t))
res.push(val);
}
}
return res;
};
}
if (!Array.prototype.indexOf) {
Array.prototype.indexOf = function (searchElement , fromIndex) {
var i,
pivot = (fromIndex) ? fromIndex : 0,
length;
if (!this) {
throw new TypeError();
}
length = this.length;
if (length === 0 || pivot >= length) {
return -1;
}
if (pivot < 0) {
pivot = length - Math.abs(pivot);
}
for (i = pivot; i < length; i++) {
if (this[i] === searchElement) {
return i;
}
}
return -1;
};
}
function onlyUnique(value, index, self) {
return self.indexOf(value) === index;
}
function correctSentence(sentence) {
var cleanedTxt = sentence.replace(/["()]/g, '');
var wordsInSentence = cleanedTxt.split(" ");
var words = wordsInSentence.filter(onlyUnique);
for (var ix in words) {
var word = words[ix];
if (word.length >= 5 && spWords.indexOf(word) <0)
{
var wordMetaphone = word.metaphone();
var lastPos=0;
var wordOption='';
var wordDistance=1000;
while ((lastPos=spMphs.indexOf(wordMetaphone, lastPos)) >=0) {
if (spVwls[lastPos] == getVowels(word)) {
var thisDistance=word.levenshtein(spWords[lastPos]);
if (thisDistance < wordDistance) {
wordDistance=thisDistance;
wordOption=spWords[lastPos];
}
}
lastPos++;
}
if (wordOption) {
var reWord=new RegExp('\\b('+word+')\\b');
//alert(word+" -> "+wordOption);
sentence = sentence.replace(reWord, wordOption);
}
}
}
return sentence;
}
function getVowels(word) {
var wordvowels='';
var vowels = new Array('a', 'e', 'i', 'o', 'u');
for (var v in vowels) {
if (word.indexOf(vowels[v]) >= 0)
wordvowels+=vowels[v];
}
return wordvowels;
}
